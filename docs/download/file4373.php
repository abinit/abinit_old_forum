This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by ABINIT configure 6.10.3, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  $ ./configure with_fallbacks_tardir=/home/unimainz/maust/abinit-6.10.3/tarballs FC=xlf with_dft_flavor=atompaw+libxc+wannier90

## --------- ##
## Platform. ##
## --------- ##

hostname = p590-tic-1-unimz1
uname -m = ppc64
uname -r = 2.6.16.53-0.16-ppc64
uname -s = Linux
uname -v = #1 SMP Tue Oct 2 16:57:49 UTC 2007

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = ppc64
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /opt/csm/bin
PATH: /home/unimainz/bin
PATH: /usr/local/bin
PATH: /usr/bin
PATH: /usr/X11R6/bin
PATH: /bin
PATH: /usr/games
PATH: /opt/bin
PATH: /opt/gnome/bin
PATH: /opt/kde3/bin
PATH: /usr/lib/mit/bin
PATH: /usr/lib/mit/sbin
PATH: /usr/local/abinit/abinit-5.8.3/build/src/98_main
PATH: /usr/local/wien2k
PATH: /usr/local/wien2k/SRC_structeditor/bin
PATH: .
PATH: /usr/local/wien2k
PATH: .


## ----------- ##
## Core tests. ##
## ----------- ##

configure:3622: checking build system type
configure:3636: result: powerpc64-unknown-linux-gnu
configure:3656: checking host system type
configure:3669: result: powerpc64-unknown-linux-gnu
configure:3689: checking target system type
configure:3702: result: powerpc64-unknown-linux-gnu
configure:3744: checking for a BSD-compatible install
configure:3812: result: /usr/bin/install -c
configure:3823: checking whether build environment is sane
configure:3873: result: yes
configure:4014: checking for a thread-safe mkdir -p
configure:4053: result: /bin/mkdir -p
configure:4066: checking for gawk
configure:4082: found /usr/bin/gawk
configure:4093: result: gawk
configure:4104: checking whether make sets $(MAKE)
configure:4126: result: yes
configure:4568: checking whether make sets $(MAKE)
configure:4590: result: yes
configure:4600: checking whether ln -s works
configure:4604: result: yes
configure:4611: checking for a sed that does not truncate output
configure:4675: result: /usr/bin/sed
configure:4684: checking for gawk
configure:4711: result: gawk
configure:4722: checking for grep that handles long lines and -e
configure:4780: result: /usr/bin/grep
configure:4787: checking for egrep
configure:4849: result: /usr/bin/grep -E
configure:5805: not loading options (no config file available)
configure:7652: ABINIT version 6.10.3
configure:7662: M4 010416 - Autoconf 026800 - Automake 011100 - Libtool 020204
configure:7673: reporting user interface changes:
configure:7728:  * new option --enable-gw-openmp is available
configure:7965: checking consistency of library-related options
configure:8016:  |---> all OK
configure:8019: 
configure:8028: checking consistency of plug-in options
configure:8041:  |---> all OK
configure:8044: 
configure:8053: checking consistency of experimental options
configure:8068:  |---> all OK
configure:8071: 
configure:8093:  |---> all OK
configure:8096: 
configure:8105: parsing command-line options
configure:9424: MPI support disabled from command-line
configure:9647: GPU support disabled from command-line
configure:9685: checking for sh
configure:9703: found /bin/sh
configure:9716: result: /bin/sh
configure:9726: checking for mv
configure:9744: found /bin/mv
configure:9757: result: /bin/mv
configure:9767: checking for perl
configure:9785: found /usr/bin/perl
configure:9798: result: /usr/bin/perl
configure:9808: checking for rm
configure:9826: found /bin/rm
configure:9839: result: /bin/rm
configure:9852: checking for dvips
configure:9882: result: no
configure:9894: checking for dvipdf
configure:9910: found /usr/bin/dvipdf
configure:9921: result: dvipdf
configure:9936: checking for latex
configure:9966: result: no
configure:9978: checking for markdown
configure:10008: result: no
configure:10020: checking for patch
configure:10036: found /usr/bin/patch
configure:10047: result: patch
configure:10062: checking for ps2pdf
configure:10078: found /usr/bin/ps2pdf
configure:10089: result: ps2pdf
configure:10104: checking for tar
configure:10120: found /bin/tar
configure:10131: result: tar
configure:10146: checking for wget
configure:10162: found /usr/bin/wget
configure:10173: result: wget
configure:10188: checking for curl
configure:10204: found /usr/bin/curl
configure:10215: result: curl
configure:10229: using internal version of MarkDown
configure:10578: checking for gcc
configure:10594: found /usr/bin/gcc
configure:10605: result: gcc
configure:10834: checking for C compiler version
configure:10843: gcc --version >&5
gcc (GCC) 4.1.2 20070115 (prerelease) (SUSE Linux)
Copyright (C) 2006 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:10854: $? = 0
configure:10843: gcc -v >&5
Using built-in specs.
Target: powerpc64-suse-linux
Configured with: ../configure --enable-threads=posix --prefix=/usr --with-local-prefix=/usr/local --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib --libexecdir=/usr/lib --enable-languages=c,c++,objc,fortran,obj-c++,java,ada --enable-checking=release --with-gxx-include-dir=/usr/include/c++/4.1.2 --enable-ssp --disable-libssp --disable-libgcj --with-slibdir=/lib --with-system-zlib --enable-shared --enable-__cxa_atexit --enable-libstdcxx-allocator=new --program-suffix= --enable-version-specific-runtime-libs --without-system-libunwind --with-cpu=default32 --enable-secureplt --with-long-double-128 --host=powerpc64-suse-linux
Thread model: posix
gcc version 4.1.2 20070115 (prerelease) (SUSE Linux)
configure:10854: $? = 0
configure:10843: gcc -V >&5
gcc: '-V' option must have argument
configure:10854: $? = 1
configure:10843: gcc -qversion >&5
gcc: unrecognized option '-qversion'
gcc: no input files
configure:10854: $? = 1
configure:10874: checking whether the C compiler works
configure:10896: gcc    conftest.c  >&5
configure:10900: $? = 0
configure:10948: result: yes
configure:10951: checking for C compiler default output file name
configure:10953: result: a.out
configure:10959: checking for suffix of executables
configure:10966: gcc -o conftest    conftest.c  >&5
configure:10970: $? = 0
configure:10992: result: 
configure:11014: checking whether we are cross compiling
configure:11022: gcc -o conftest    conftest.c  >&5
configure:11026: $? = 0
configure:11033: ./conftest
configure:11037: $? = 0
configure:11052: result: no
configure:11057: checking for suffix of object files
configure:11079: gcc -c   conftest.c >&5
configure:11083: $? = 0
configure:11104: result: o
configure:11108: checking whether we are using the GNU C compiler
configure:11127: gcc -c   conftest.c >&5
configure:11127: $? = 0
configure:11136: result: yes
configure:11145: checking whether gcc accepts -g
configure:11165: gcc -c -g  conftest.c >&5
configure:11165: $? = 0
configure:11206: result: yes
configure:11223: checking for gcc option to accept ISO C89
configure:11287: gcc  -c -g -O2  conftest.c >&5
configure:11287: $? = 0
configure:11300: result: none needed
configure:11331: checking for style of include used by make
configure:11359: result: GNU
configure:11384: checking dependency style of gcc
configure:11494: result: gcc3
configure:11566: checking how to run the C preprocessor
configure:11597: gcc -E  conftest.c
configure:11597: $? = 0
configure:11611: gcc -E  conftest.c
conftest.c:18:28: error: ac_nonexistent.h: No such file or directory
configure:11611: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ABINIT"
| #define PACKAGE_TARNAME "abinit"
| #define PACKAGE_VERSION "6.10.3"
| #define PACKAGE_STRING "ABINIT 6.10.3"
| #define PACKAGE_BUGREPORT "https://bugs.launchpad.net/abinit/"
| #define PACKAGE_URL ""
| #define PACKAGE "abinit"
| #define VERSION "6.10.3"
| #define ABINIT_VERSION "6.10.3"
| #define ABINIT_VERSION_MAJOR "6"
| #define ABINIT_VERSION_MINOR "10"
| #define ABINIT_VERSION_MICRO "3"
| #define ABINIT_VERSION_BUILD "20120402"
| #define ABINIT_VERSION_BASE "6.10"
| #define HAVE_OS_LINUX 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:11636: result: gcc -E
configure:11656: gcc -E  conftest.c
configure:11656: $? = 0
configure:11670: gcc -E  conftest.c
conftest.c:18:28: error: ac_nonexistent.h: No such file or directory
configure:11670: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ABINIT"
| #define PACKAGE_TARNAME "abinit"
| #define PACKAGE_VERSION "6.10.3"
| #define PACKAGE_STRING "ABINIT 6.10.3"
| #define PACKAGE_BUGREPORT "https://bugs.launchpad.net/abinit/"
| #define PACKAGE_URL ""
| #define PACKAGE "abinit"
| #define VERSION "6.10.3"
| #define ABINIT_VERSION "6.10.3"
| #define ABINIT_VERSION_MAJOR "6"
| #define ABINIT_VERSION_MINOR "10"
| #define ABINIT_VERSION_MICRO "3"
| #define ABINIT_VERSION_BUILD "20120402"
| #define ABINIT_VERSION_BASE "6.10"
| #define HAVE_OS_LINUX 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:11710: checking which type of compiler we have
configure:11927: result: gnu (SUSE
configure:12125: checking for ANSI C header files
configure:12145: gcc -c   conftest.c >&5
configure:12145: $? = 0
configure:12218: gcc -o conftest    conftest.c  >&5
configure:12218: $? = 0
configure:12218: ./conftest
configure:12218: $? = 0
configure:12229: result: yes
configure:12242: checking for sys/types.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for sys/stat.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for stdlib.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for string.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for memory.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for strings.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for inttypes.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for stdint.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12242: checking for unistd.h
configure:12242: gcc -c   conftest.c >&5
configure:12242: $? = 0
configure:12242: result: yes
configure:12254: checking whether byte ordering is bigendian
configure:12269: gcc -c   conftest.c >&5
conftest.c:30: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'a'
configure:12269: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ABINIT"
| #define PACKAGE_TARNAME "abinit"
| #define PACKAGE_VERSION "6.10.3"
| #define PACKAGE_STRING "ABINIT 6.10.3"
| #define PACKAGE_BUGREPORT "https://bugs.launchpad.net/abinit/"
| #define PACKAGE_URL ""
| #define PACKAGE "abinit"
| #define VERSION "6.10.3"
| #define ABINIT_VERSION "6.10.3"
| #define ABINIT_VERSION_MAJOR "6"
| #define ABINIT_VERSION_MINOR "10"
| #define ABINIT_VERSION_MICRO "3"
| #define ABINIT_VERSION_BUILD "20120402"
| #define ABINIT_VERSION_BASE "6.10"
| #define HAVE_OS_LINUX 1
| #define CC_GNU 1
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #ifndef __APPLE_CC__
| 	       not a universal capable compiler
| 	     #endif
| 	     typedef int dummy;
| 
configure:12314: gcc -c   conftest.c >&5
configure:12314: $? = 0
configure:12332: gcc -c   conftest.c >&5
configure:12332: $? = 0
configure:12460: result: yes
configure:13019: checking for g++
configure:13035: found /usr/bin/g++
configure:13046: result: g++
configure:13073: checking for C++ compiler version
configure:13082: g++ --version >&5
g++ (GCC) 4.1.2 20070115 (prerelease) (SUSE Linux)
Copyright (C) 2006 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:13093: $? = 0
configure:13082: g++ -v >&5
Using built-in specs.
Target: powerpc64-suse-linux
Configured with: ../configure --enable-threads=posix --prefix=/usr --with-local-prefix=/usr/local --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib --libexecdir=/usr/lib --enable-languages=c,c++,objc,fortran,obj-c++,java,ada --enable-checking=release --with-gxx-include-dir=/usr/include/c++/4.1.2 --enable-ssp --disable-libssp --disable-libgcj --with-slibdir=/lib --with-system-zlib --enable-shared --enable-__cxa_atexit --enable-libstdcxx-allocator=new --program-suffix= --enable-version-specific-runtime-libs --without-system-libunwind --with-cpu=default32 --enable-secureplt --with-long-double-128 --host=powerpc64-suse-linux
Thread model: posix
gcc version 4.1.2 20070115 (prerelease) (SUSE Linux)
configure:13093: $? = 0
configure:13082: g++ -V >&5
g++: '-V' option must have argument
configure:13093: $? = 1
configure:13082: g++ -qversion >&5
g++: unrecognized option '-qversion'
g++: no input files
configure:13093: $? = 1
configure:13097: checking whether we are using the GNU C++ compiler
configure:13116: g++ -c   conftest.cpp >&5
configure:13116: $? = 0
configure:13125: result: yes
configure:13134: checking whether g++ accepts -g
configure:13154: g++ -c -g  conftest.cpp >&5
configure:13154: $? = 0
configure:13195: result: yes
configure:13220: checking dependency style of g++
configure:13330: result: gcc3
configure:13359: checking which type of C++ compiler we have
configure:13576: result: gnu (SUSE
configure:13841: checking for xlf
configure:13859: found /usr/bin/xlf
configure:13871: result: /usr/bin/xlf
configure:13990: checking for Fortran compiler version
configure:13999: xlf --version >&5
xlf(1)         IBM XL Fortran Advanced Edition for Linux, V11.1         xlf(1)



NAME
       xlf,  xlf_r,  f77,  fort77,  xlf90,  xlf90_r, f90, xlf95, xlf95_r, f95,
       xlf2003, xlf2003_r, f2003 ‐ invoke the IBM XL Fortran compiler.


SYNTAX
       <invocation‐command> [ <option> | <inputfile> ] ...


DESCRIPTION
       The invocation commands compile Fortran source files.
       The commands and their recommended uses are described below.

       Invocations                   Usage (supported standards)
       _________________________________________________________

       xlf, xlf_r, f77,              Compile Fortran 77 source
       fort77                        files.

       xlf90, xlf90_r, f90           Compile Fortran 90 source
                                     files.

       xlf95, xlf95_r, f95           Compile Fortran 95 source
                                     files.

       xlf2003, xlf2003_r,           Compile Fortran 2003 source
       f2003                         files.

       The main difference between these commands is that they  use  different
       default  options (which are set in the configuration file /etc/opt/ibm‐
       cmp/xlf/11.1/xlf.cfg).
       See the Compiler Reference for more  information  on  these  invocation
       commands.

       All  invocations with a suffix of _r allow for thread‐safe compilation.
       Use these commands to create threaded applications or to link  programs
       that use multi‐threading.

       These  commands  also  process assembler source files and object files.
       The compiler calls the link  editor  to  produce  a  single  executable
       unless  you specify the compiler options that prevent object files from
       being linked.

       The input file may have any of the following suffixes:

        .f, .f77, .f90, .f95,        Fortran source file
        .f03

        .o or .a                     Object file for ld command

        .s                           Assembler source file

        .so                          Shared object file

        .F, .F77, .F90, .F95,        Fortran source file
        .F03                         with cpp preprocessor
                                     directives


OPTIONS
       Compiler options are categorized by their functions and may be used  to
       set  the  compiler  behavior.  Options  can  be flag options or keyword
       options.

       Keyword options are specified in one of the following ways:
       ‐q<option>
       ‐q<option>=<suboption>
       ‐q<option>=<suboption>:<suboption>

       Keyword options with no  suboptions  represent  switches  that  may  be
       either  on  or off. ‐qx turns the switch on, and −qnox turns the switch
       off. For example, ‐qsource tells the compiler to produce a source list‐
       ing  and ‐qnosource tells the compiler not to produce a source listing.

Output control options
       ‐c     Instructs the compiler to pass  source  files  to  the  compiler
              only. The compiled source files are not sent to the linker. This
              option produces an object  file,  file_name.o,  for  each  valid
              source file.

       ‐d     Keeps  temporary files produced by C preprocessor (cpp), instead
              of deleting them. By default, temporary files  produced  by  cpp
              are deleted.

       ‐qmoddir=<directory>
              Specifies  the  location  for  any  .mod files that the compiler
              writes.

              Default:
                   .mod files are placed in the current directory.

       ‐o <path>
              Specifies an output location for the object, assembler, or  exe‐
              cutable  files  created  by  the compiler. When the ‐o option is
              used during compiler invocation,  <path>  can  be  the  name  of
              either a file or a directory.

              Default: −o a.out

       ‐S     Generates  an assembler language file (.s) for each source file.
              The resulting .s files can be assembled  to  produce  object  .o
              files or an executable file (a.out).

Input control options
       ‐qcclines | ‐qnocclines
              Enables recognition of conditional compilation lines.

              Default:
                   · ‐qcclines if ‐qsmp=omp is specified.
                   · ‐qnocclines otherwise.

       ‐qci=<numbers>
              Activates  the specified INCLUDE lines. Specifies identification
              numbers (from 1 to 255) of conditional includes.

              Default: No default value

       ‐qcr | ‐qnocr
              Allows you to control how the compiler interprets the  CR  (car‐
              riage return) character. This allows you to compile code written
              using a Mac OS or DOS/Windows editor.

              Default: −qnocr

       ‐qdirective[=<directive_list>] | ‐qnodirective[=<directive_list>]
              Specifies sequences of characters, known as  trigger  constants,
              that identify comment lines as compiler comment directives.

              Default: −qnodirective

       ‐qfixed[=<right_margin>]
              Indicates  that the input source program is in fixed source form
              and optionally specifies the maximum line length.

              Default:
                   · ‐qfixed=72 for the xlf, xlf_r, f77, and fort77 invocation
                   commands.
                   ·  ‐qfree=f90  for the xlf90, xlf90_r, f90, xlf95, xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.

       ‐qfree[=f90|ibm]
              Indicates that the source code is free form.

              ibm
                   Specifies compatibility with the free source  form  defined
                   for VS FORTRAN.
              f90
                   Specifies  compatibility  with the free source form defined
                   for Fortran 90, Fortran 95 and Fortran 2003.

              Default:
                   · ‐qfixed=72 for the xlf, xlf_r, f77, and fort77 invocation
                   commands.
                   ·  ‐qfree=f90  for the xlf90, xlf90_r, f90, xlf95, xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.

       ‐I<directory_path>
              Adds a directory to the search path for #include files and  .mod
              files.  Before  checking the default directories for include and
              .mod files, the compiler checks each  directory  in  the  search
              path. For include files, this path is only used if the file name
              in an INCLUDE line is not provided with an absolute path.

              Default:
                   The following directories are searched,  in  the  following
                   order, after any paths that are specified by the ‐I option:
                   1) The current directory.
                   2) The directory where the source file is located.
                   3) /usr/include.

       ‐qmixed | ‐qnomixed
              The long form of the ‐U option. Makes the compiler  case  sensi‐
              tive for names.

              Default: −qnomixed

       ‐qsuffix=<suboption>=<suffix>
              Specifies the source‐file suffix on the command line. Suboptions
              include:

              f=<suffix>
                   where <suffix> is the new source‐file suffix.
              o=<suffix>
                   where <suffix> is the new object‐file suffix.
              s=<suffix>
                   where <suffix> is the new assembler source‐file suffix.
              cpp=<suffix>
                   where <suffix> is the new preprocessor source‐file  suffix.

       ‐U     Makes  the  compiler case sensitive for names. Suppresses lower‐
              case folding of Fortran code. By default,  the  compiler  inter‐
              prets all names as if they were in lowercase.

       ‐qxlines | ‐qnoxlines
              Specifies  whether  fixed source form lines with a X in column 1
              are compiled or treated as comments.

              Default: −qnoxlines

Language element control options
       ‐D     Specifies whether the compiler compiles fixed source form  lines
              with a D in column 1 or treats them as comments.

       ‐qdlines | ‐qnodlines
              The long form of the ‐D option.

              Default: −qnodlines

       ‐qlanglvl=<suboptions_list>
              Determines  which language standard (or superset, or subset of a
              standard) to consult for nonconformance. It  identifies  noncon‐
              forming  source code and also options that allow such nonconfor‐
              mances.
              <suboptions_list> is a colon‐separated  list  of  the  following
              suboptions:

              77std
                   Accepts  the  language  that  the  ANSI FORTRAN 77 standard
                   specifies and reports anything  else  using  language‐level
                   messages.
              90std
                   Accepts the language that the ISO Fortran 90 standard spec‐
                   ifies and reports anything else using  language‐level  mes‐
                   sages.
              90pure
                   The  same  as  90std  except that it also reports language‐
                   level messages for  any  obsolescent  Fortran  90  features
                   used.
              90ext
                   Obsolete suboption that is equivalent to extended. To avoid
                   problems in the future, use the extended suboption instead.
              95std
                   Accepts the language that the ISO Fortran 95 standard spec‐
                   ifies and reports anything else using  language‐level  mes‐
                   sages.
              95pure
                   The  same  as  95std  except that it also reports language‐
                   level messages for  any  obsolescent  Fortran  95  features
                   used.
              2003std
                   Accepts the language that the ISO Fortran 95 standard spec‐
                   ifies, as well as all Fortran 2003 features supported by XL
                   Fortran,  and  reports  anything  else using language‐level
                   messages.
              2003pure
                   The same as 2003std except that it also  reports  language‐
                   level  messages  for  any obsolescent Fortran 2003 features
                   used.
              extended
                   Accepts the full Fortran 95 language standard, all  Fortran
                   2003  features supported by XL Fortran, and all extensions,
                   effectively turning off language‐level checking.

              Default: ‐qlanglvl=extended

       ‐qmbcs | ‐qnombcs
              Specifies that string literals and comments can  contain  multi‐
              byte characters.

              Default: −qnombcs

       ‐qnullterm | ‐qnonullterm
              Appends  a  null  character to each character expression that is
              passed as a dummy argument, making it more  convenient  to  pass
              strings to C functions.

              Default: −qnonullterm

       ‐1     Executes  each  DO loop in the compiled program at least once if
              its DO statement is executed, even if the iteration count is  0.
              This is the short form of the ‐qonetrip option.

       ‐qonetrip | ‐qnoonetrip
              The long form of the ‐1 option.

              Default: −qnoonetrip

       ‐qposition={appendold|appendunknown}
              Positions  the  file pointer at the end of the file when data is
              written after an OPEN statement with no POSITION= specifier, and
              the  corresponding  STATUS=value  (OLD or UNKNOWN) is specified.
              The default setting depends on the I/O specifiers  in  the  OPEN
              statement and on the compiler invocation command.

              Default:
                   ·  ‐qposition=appendold  for the xlf, xlf_r, f77 and fort77
                   invocation commands.
                   · The defined Fortran 90 and Fortran 95 behaviors  for  the
                   xlf90,   xlf90_r,   f90,   xlf95,  xlf95_r,  f95,  xlf2003,
                   xlf2003_r and f2003 invocation commands.

       ‐qqcount | ‐qnoqcount
              Accepts the character‐count Q edit descriptor(Q) as well as  the
              extended‐precision  Q  edit  descriptor (Qw.d). With −qnoqcount,
              all Q edit descriptors are interpreted as the extended‐precision
              Q edit descriptor.

              Default: −qnoqcount

       ‐qsaa | ‐qnosaa
              Checks  for  conformance to the SAA Fortran language definition.
              It identifies nonconforming source code and  also  options  that
              allow such nonconformances.

              Default: −qnosaa

       ‐qsave[={all|defaultinit}] | ‐qnosave
              Specifies the default storage class for local variables.

              all
                   The  default  storage  class  for  all  local  variables is
                   STATIC. Specifying this suboption is the same as specifying
                   the ‐qsave option without any suboptions.
              defaultinit
                   The  default storage class is STATIC for local variables of
                   derived type that have default initialization specified.

              Default:
                   · ‐qsave for the xlf, xlf_r, f77 and fort77 invocation com‐
                   mands.
                   ·  ‐qnosave  otherwise.  ‐qnosave  sets the default storage
                   class to AUTOMATIC.

       ‐qsclk={centi|micro}
              Specifies the resolution that the SYSTEM_CLOCK intrinsic  proce‐
              dure uses in a program.

              centi
                   Uses centisecond resolution for the values returned.
              micro
                   Uses microsecond resolution.

              Default: −qsclk=centi

       ‐u     Specifies  that  no implicit typing of variable names is permit‐
              ted. It has the same effect as using the IMPLICIT NONE statement
              in each scope that allows implicit statements.

       ‐qxlf77=<settings>
              Provides  compatibility  with  Fortran  77  aspects  of language
              semantics and I/O data format that have changed. Most  of  these
              changes are required by the Fortran 90 standard.
              Suboptions include:

              blankpad | noblankpad
                   Pads  an  internal  or  direct‐access  file  if  the format
                   requires more characters than the record contains.
              gedit77 | nogedit77
                   Uses Fortran 77 semantics for the output  of  REAL  objects
                   with the G edit descriptor.
              intarg | nointarg
                   Converts  all  the integer arguments of an intrinsic proce‐
                   dure to the kind of the longest argument, if  they  are  of
                   different kinds.
              intxor | nointxor
                   Treats  .XOR. as a logical binary intrinsic operator rather
                   than a defined operator.
              leadzero | noleadzero
                   Produces a leading zero in realoutput under the D, E, F and
                   Q edit descriptors.
              oldboz | nooldboz
                   Turns  blanks  into zeros for data read by B, O, and Z edit
                   descriptors, regardless of the BLANK= specifier or  any  BN
                   or BZ control edit descriptors.
              persistent | nopersistent
                   Saves  the addresses of arguments to subprograms with ENTRY
                   statements in static storage.
              softeof | nosofteof
                   Allows READ and WRITE operations when a unit is  positioned
                   after  its  endfile  record,  unless  that  position is the
                   result of executing an ENDFILE statement.

              Default:
                   blankpad, nogedit77, nointarg, nointxor,  leadzero,  noold‐
                   boz, nopersistent, and nosofteof.

       ‐qxlf90=<suboption>
              Determines  whether  the compiler provides the Fortran 90 or the
              Fortran 95 level of support for certain aspects of the language.
              <suboption> can be one of the following:

              signedzero | nosignedzero
                   Determines  how  the SIGN(A,B) function handles signed real
                   0.0. In addition, determines whether negative internal val‐
                   ues  will  be  prefixed  with a minus when formatted output
                   would produce a negative sign zero.
              autodealloc | noautodealloc
                   Determines whether  the  compiler  deallocates  allocatable
                   arrays that are declared locally without either the SAVE or
                   the STATIC attribute and have a status of  currently  allo‐
                   cated when the subprogram terminates.
              oldpad | nooldpad
                   When the PAD=specifier is present in the INQUIRE statement,
                   specifying ‐qxlf90=nooldpad returns UNDEFINED when there is
                   no  connection,  or  when the connection is for unformatted
                   I/O. This behavior conforms to the Fortran 95 standard  and
                   above.  Specifying  ‐qxlf90=oldpad preserves the Fortran 90
                   behavior.

              Default:
                   · nosignedzero,  noautodealloc  and  oldpad  for  the  xlf,
                   xlf_r,  f77, fort77, xlf90, xlf90_r and f90 invocation com‐
                   mands.
                   · signedzero,  autodealloc  and  nooldpad  for  the  xlf95,
                   xlf95_r,  f95, xlf2003, xlf2003_r and f2003 invocation com‐
                   mands.

       ‐qxlf2003=<suboptions_list>
              Provides the ability to use language features introduced in  the
              Fortran 2003 standard.
              <suboptions_list>  is  a  colon‐separated list of one or more of
              the following suboptions:

              autorealloc | noautorealloc
                   Controls whether the compiler automatically reallocates the
                   left‐hand‐side  (LHS) with the shape of the right‐hand‐side
                   RHS when assigning into an allocatable variable. This  sub‐
                   option  has  no  effect  on reallocation when the values of
                   length type parameters in the LHS and RHS differ.
              bozlitargs | nobozlitargs
                   The bozlitargs suboption ensures that the passing  of  boz‐
                   literal  constants as arguments to the INT, REAL, CMPLX, or
                   DBLE intrinsic function conforms to the Fortran 2003  stan‐
                   dard.  The  ‐qlanglvl=2003pure  or ‐qlanglvl=2003std option
                   must  be  specified,  as  well.  If  ‐qport=typlssarg   and
                   −qxlf2003=bozlitargs  are  specified,  passing  boz‐literal
                   constants to the CMPLX intrinsic  will  yield  non‐standard
                   results.
              oldnaninf | nooldnaninf
                   When  oldnaninf is in effect, the compiler uses old XL For‐
                   tran behavior for output of IEEE NaN  and  infinity  excep‐
                   tional values in real or complex editing.
                   When  nooldnaninf  is in effect, the compiler uses the For‐
                   tran 2003 standard for output  of  IEEE  NaN  and  infinity
                   exceptional values in real or complex editing.
              polymorphic | nopolymorphic
                   When polymorphic is in effect, the compiler allows polymor‐
                   phic entities in Fortran  source  files  and  runtime  type
                   information  is generated for each derived type definition.
                   When nopolymorphic is in effect, polymorphic entities  can‐
                   not be specified in the Fortran source files and no runtime
                   type information is generated.
              signdzerointr | nosigndzerointr
                   When signdzerointr is in  effect,  the  passing  of  signed
                   zeros  to  the  SQRT,  LOG,  and  ATAN2 intrinsic functions
                   returns results consistent with the Fortran 2003  standard.
                   The  −qxlf90=signedzero  option must be in effect, as well.
                   For the xlf90, xlf77  and  xlf  invocations,  specify  both
                   options to have the Fortran 2003 behavior.
              stopexcept | nostopexcept
                   When  stopexcept is in effect, STOP statements will display
                   informational messages about signaling IEEE  floating‐point
                   exceptions.
                   When  nostopexcept is in effect, informational messages are
                   suppressed.
              volatile | novolatile
                   When volatile is in effect, a non‐VOLATILE entity  that  is
                   use‐  or  host‐associated  can  be specified as VOLATILE in
                   inner or local scope.

              Default:
                   ·  autorealloc,   bozlitargs,   nooldnaninf,   polymorphic,
                   signdzerointr,  stopexcept  and  volatile  for  the  f2003,
                   xlf2003, or xlf2003_r invocation commands.
                   · noautorealloc,  nobozlitargs,  oldnaninf,  nopolymorphic,
                   nosigndzerointr,  nostopexcept and novolatile for all other
                   invocation commands.

Floating‐point and integer control options
       ‐qautodbl=<suboption>
              Provides  an  automatic  means  of  converting  single‐precision
              floating‐point  calculations to double‐precision and of convert‐
              ing double‐precision  calculations  to  extended‐precision.  The
              suboptions are:

              none
                   Does not promote or pad any objects that share storage.
              dbl4
                   Promotes  floating‐point  objects that are single‐precision
                   (4 bytes in size) to double‐precision.
                   This suboption requires  the  libxlfpmt4.a  library  during
                   linking.
              dbl8
                   Promotes  floating‐point  objects that are double‐precision
                   (8 bytes in size) to extended‐precision.
                   This suboption requires  the  libxlfpmt8.a  library  during
                   linking.
              dbl
                   Combines the promotions that dbl4 and dbl8 perform.
                   This  suboption  requires the libxlfpmt4.a and libxlfpmt8.a
                   libraries during linking.
              dblpad4
                   Performs the same promotions as dbl4 and  pads  objects  of
                   other types (except CHARACTER) if they could possibly share
                   storage with promoted objects.
                   This suboption requires the  libxlfpmt4.a  and  libxlfpad.a
                   libraries during linking.
              dblpad8
                   Performs  the  same  promotions as dbl8 and pads objects of
                   other types (except CHARACTER) if they could possibly share
                   storage with promoted objects.
                   This  suboption  requires  the libxlfpmt8.a and libxlfpad.a
                   libraries during linking.
              dblpad
                   Combines the promotions done by  dbl4  and  dbl8  and  pads
                   objects  of  other  types  (except CHARACTER) if they could
                   possibly share storage with promoted objects.
                   This suboption requires the libxlfpmt4.a, libxlfpmt8.a, and
                   libxlfpad.a libraries during linking.

              Default: ‐qautodbl=none

       ‐qdpc[=e] | ‐qnodpc
              Increases  the precision of real constants, for maximum accuracy
              when assigning real constants  to  DOUBLE  PRECISION  variables.
              ‐qdpc=e also promotes constants with an e exponent.

              Default: −qnodpc

       ‐qenum=<suboption>
              Specifies  the  range for an enumerator’s value. <suboption> can
              be:

              1
                   The enumerator value must fit into 1 byte of  storage.  The
                   enumerator is of type integer(4).
              2
                   The  enumerator value must fit into 2 bytes of storage. The
                   enumerator is of type integer(4).
              4
                   The enumerator value must fit into 4 bytes of storage.  The
                   enumerator is of type integer(4).
              8
                   The  enumerator value must fit into 8 bytes of storage. The
                   enumerator is of type integer(8).

              Default: −qenum=4

       ‐qfloat=<suboptions_list>
              Specifies various floating‐point suboptions. This provides  dif‐
              ferent  strategies  for speeding up or improving the accuracy of
              floating‐point calculations. <suboptions_list> is a  colon‐sepa‐
              rated list of one or more of the following:

              complexgcc | nocomplexgcc
                   Enables  compatibility  with  GCC  passing and returning of
                   parameters of complex data type.
                   Default: nocomplexgcc
              fltint | nofltint
                   Speeds up floating‐point‐to‐integer  conversions  by  using
                   faster  inline  code  that  does  not  check for overflows.
                   ‐qfloat=nofltint checks  floating‐point‐to‐integer  conver‐
                   sions for out‐of‐range values.
                   Default:
                     · nofltint at ‐O2 optimization.
                     ·  fltint  when  ‐qnostrict or ‐O3 or higher optimization
                     level is in effect.
              fold | nofold
                   Specifies that constant floating‐point expressions  are  to
                   be evaluated at compile time rather than at run time.
                   Default: fold
              gcclongdouble | nogcclongdouble
                   Specifies  whether  the compiler should use GCC‐supplied or
                   IBM‐supplied library  functions  for  128‐bit  long  double
                   operations. gcclongdouble ensures binary compatibility with
                   GCC for mathematical calculations but nogcclongdouble  pro‐
                   duces better performance.
                   Default: nogcclongdouble
              hsflt | nohsflt
                   The  hsflt  option  speeds  up  calculations  by truncating
                   instead of rounding computed  values  to  single  precision
                   before  storing  and  on conversions from floating‐point to
                   integer. The nohsflt suboption specifies that single‐preci‐
                   sion  expressions  are  rounded after expression evaluation
                   and that floating‐point‐to‐integer conversions  are  to  be
                   checked for out‐of‐range values.
                   Default: nohsflt
              maf | nomaf
                   Makes  floating‐point calculations faster and more accurate
                   by using  floating‐point  multiply‐add  instructions  where
                   appropriate.
                   Default: maf
              nans | nonans
                   Generates  extra  instructions to detect signaling NaN when
                   converting from single‐precision to double‐precision at run
                   time. The option nonans specifies that this conversion need
                   not be detected.
                   Default: nonans
              rngchk | norngchk
                   Specifying norngchk instructs the compiler  to  skip  range
                   checking, allowing for increased performance where division
                   and sqrt operations are performed repeatedly within a loop.
                   When  rngchk  is specified, range checking is performed for
                   input arguments for software divide and inlined sqrt opera‐
                   tions.
                   When  ‐qstrict  is  active,  the  setting of this option is
                   forced to ‐qfloat=rngchk. When ‐qnostrict  is  active,  the
                   setting  of  this  option  is  ‐qfloat=norngchk  unless the
                   −qfloat=rngchk option is explicitly set by the user.
                   Default: rngchk
              rrm | norrm
                   Prevents floating‐point optimizations that are incompatible
                   with runtime rounding to plus and minus infinity modes.
                   Default: norrm
              rsqrt | norsqrt
                   Specifies whether a sequence of code that involves division
                   by the result of a square root can be replaced by calculat‐
                   ing  the  reciprocal  of  the  square root and multiplying.
                   Allowing this replacement produces code that  runs  faster.
                   ‐qfloat=rsqrt has no effect unless ‐qignerrno is also spec‐
                   ified.
                   Default:
                     · norsqrt at ‐O2 optimization.
                     · rsqrt when when ‐qnostrict or ‐O3 or  higher  optimiza‐
                     tion level is in effect.
              strictnmaf | nostrictnmaf
                   Ensures  that  the  compiler does not perform optimizations
                   that introduce multiply‐add operations that do not preserve
                   the sign of a zero value.
                   Default: nostrictnmaf

       ‐qieee=<suboption>
              Specifies  the rounding mode for the compiler to use when evalu‐
              ating constant floating‐point expressions at compile time. <sub‐
              option> can be one of the following:

              Near
                   Round to nearest representable number
              Minus
                   Round toward minus infinity
              Plus
                   Round toward plus infinity
              Zero
                   Round toward zero

              Default: −qieee=near

       ‐qintlog | ‐qnointlog
              Allows  mixing  of INTEGER and LOGICAL values in expressions and
              statements.

              Default: −qnointlog

       ‐qintsize={2|4|8)
              Sets the size of default INTEGER and LOGICAL values.

              Default: −qintsize=4

       ‐qrealsize=(4|8}
              Sets the default size in bytes of REAL, DOUBLE  PRECISION,  COM‐
              PLEX and DOUBLE COMPLEX values.

              Default: −qrealsize=4

       ‐qstrictieeemod | ‐qnostrictieeemod
              Specifies that the compiler will adhere to the Fortran 2003 IEEE
              arithmetic rules for  the  ieee_arithmetic  and  ieee_exceptions
              intrinsic modules.

              Default: −qstrictieeemod

       ‐y<rounding_mode>
              Equivalent  to  the  ‐qieee  option.  Specifies the compile‐time
              rounding mode  of  constant  floating‐point  expressions,  where
              <rounding_mode> is one of the following:

              m = round toward minus infinity
              n = round to the nearest representable number, ties to even
              p = round toward plus infinity
              z = round toward zero

              Default: −yn

Object code control options
       ‐q32, ‐q64
              Selects  either 32‐bit or 64‐bit compilation mode.  Use the ‐q32
              and ‐q64 options, along with  the  ‐qarch  and  −qtune  compiler
              options, to optimize the output of the compiler to the architec‐
              ture on which that output will be used.

              Default: −q32

       ‐qinlglue | ‐qnoinlglue
              This option inlines glue code that optimizes  external  function
              calls when compiling at ‐q64 and ‐O2 and higher.

              Default: −qnoinlglue

       ‐qpic[={small|large}] | ‐qnopic
              Generates  position‐independent  code (pic). Specify −qpic=small
              if the global  offset  table  must  be  64  Kb  or  smaller,  or
              ‐qpic=large if it can be larger than 64 Kb.

              Default: −qpic=small

       ‐qsaveopt | ‐qnosaveopt
              Saves the command‐line options used for compiling a source file,
              the version and level of each compiler component invoked  during
              compilation,  and  other information to the corresponding object
              file.
              This option must be used with the ‐c option.

              Default: −qnosaveopt

       ‐qtbtable=<suboption>
              Generates a traceback table that contains information about each
              function,  including the type of function as well as stack frame
              and register information. The traceback table is placed  in  the
              text  segment  at the end of its code.  This option applies only
              to 64‐bit compilations, and is ignored if specified for a 32‐bit
              compilation.  Suboptions include:

              none
                   No traceback table is generated.
              small
                   A  traceback  table  is generated with no name or parameter
                   information. This is the default with optimization if ‐g is
                   not specified.
              full
                   A  full  traceback  table is generated. This is the default
                   with ‐qnoopt or ‐g specified.

              Default:
                   · ‐qtbtable=full when compiling non‐optimized (without  −O)
                   or for debugging (with ‐g).
                   · ‐qtbtable=small otherwise.

       ‐qthreaded
              Ensures that all optimizations will be thread‐safe for executing
              in a multi‐threaded environment.

              Default:
                   ‐qthreaded for the xlf90_r, xlf95_r, xlf_r,  and  xlf2003_r
                   commands.

Error checking and debugging options
       ‐#     Traces the compilation and generates information on the progress
              of the compilation without invoking the preprocessor,  compiler,
              or linkage editor.

       ‐C     Checks  each  reference  to  an array element, array section, or
              character substring for correctness.

       ‐qcheck | ‐qnocheck
              The long form of the ‐C option.

              Default: −qnocheck

       ‐qflttrap[=<suboptions_list>] | ‐qnoflttrap
              Generates instructions to detect and trap runtime floating‐point
              exceptions.  <suboptions_list>  is a colon‐separated list of one
              or more of the following suboptions:

              enable
                   Enables trapping of the specified exceptions.
              imprecise
                   Only checks for  the  specified  exceptions  on  subprogram
                   entry and exit.
              inexact
                   Detects floating‐point inexact exceptions.
              invalid
                   Detects floating‐point invalid operation exceptions.
              nanq
                   Generates code to detect and trap NaNQ (Not a Number Quiet)
                   exceptions handled or generated  by  floating‐point  opera‐
                   tions.
              overflow
                   Detects floating‐point overflow.
              underflow
                   Detects floating‐point underflow.
              zerodivide
                   Detects floating‐point division by zero.

              Default: −qnoflttrap

       ‐qfullpath | ‐qnofullpath
              Records  the  full  or absolute path names of source and include
              files in object files compiled with debugging information  (when
              you use the ‐g option).

              Default: −qnofullpath

       ‐g     Generates debug information for debugging tools.
              ‐qdbg is the long form of ‐g.
              ‐g implies the ‐Q! option.

       ‐qhalt=<sev>
              Stops  the  compiler after the first phase if the severity level
              of errors detected equals or exceeds the specified level, <sev>.
              The severity levels in increasing order of severity are:

              i = informational messages
              l = language‐level messages
              w = warning messages
              e = error messages
              s = severe error messages
              u = unrecoverable error messages

              Default: −qhalt=s

       ‐qinit=f90ptr
              Makes  the  initial association status of pointers disassociated
              instead of undefined.
              This option applies to Fortran 90 and above.

              Default:
                   The default association status of pointers is undefined.

       ‐qinitauto=[<hex_value>] | ‐qnoinitauto
              Initializes each byte or word of storage for automatic variables
              to  the  specified hexadecimal value <hex_value>. This generates
              extra code and should only be used for error determination.   If
              you  specify ‐qinitauto without a <hex_value>, the compiler ini‐
              tializes the value of each byte of automatic storage to zero.

              Default: −qnoinitauto

       ‐qkeepparm | ‐qnokeepparm
              Ensures that function parameters are stored on the stack even if
              the  application is optimized. As a result, parameters remain in
              the expected memory location, providing access to the values  of
              these incoming parameters to tools such as debuggers.

              Default: −qnokeepparm

       ‐qlinedebug | ‐qnolinedebug
              Generates  only  abbreviated  line  number  and source file name
              information for the debugger.

              Default: −qnolinedebug

       ‐qobject | ‐qnoobject
              Specifies whether to produce an object file or to  stop  immedi‐
              ately after checking the syntax of the source files.

              Default: −qobject

       ‐qoptdebug | ‐qnooptdebug
              When  used with high levels of optimization, ‐qoptdebug produces
              source files containing optimized pseudocode that can be read by
              a debugger.
              An  output  file  with  a  .optdbg extension is created for each
              input file compiled with ‐qoptdebug. You can use the information
              contained  in  this  file  to  help you understand how your code
              actually behaves under optimization.

              Default: ‐qnooptdebug

       ‐qwarn64 | ‐qnowarn64
              Enables checking for possible data conversion  problems  between
              32‐bit and 64‐bit compiler modes.

              Default: −qnowarn64

       ‐qxflag=dvz
              Specifying  ‐qxflag=dvz  causes the compiler to generate code to
              detect  floating‐point  divide‐by‐zero  operations.  With   this
              option  on,  the  extra code calls the external handler function
              __xl_dzx when the divisor is zero.
              By default,  no  code  is  generated  to  detect  floating‐point
              divide‐by‐zero operations.

Listing and messages options
       ‐qattr[=full] | ‐qnoattr
              Produces  a  compiler listing that includes an attribute listing
              for all identifiers. If ‐qattr is specified,  the  listing  con‐
              tains  only  those  identifiers that are used. If ‐qattr=full is
              specified, the listing contains all names. If ‐qnoattr is speci‐
              fied, no listing is produced.

              Default: −qnoattr

       ‐qflag=<listing_severity>:<terminal_severity>
              Defines  the minimum severity level of diagnostic messages to be
              written to the listing file and to  the  user  terminal.  <list‐
              ing_severity>  is  the  minimum  level for the listing file, and
              <terminal_severity> is the minimum level for the  terminal.  The
              message severity levels are:

              i = informational messages
              l = language‐level messages
              w = warning messages
              e = error messages
              s = severe error messages
              q = no messages, even if the compiler encounters
                  unrecoverable errors

              Default: −qflag=i:i

       ‐qlist[={offset|nooffset}] | ‐qnolist
              Produces a compiler listing that includes an object listing. You
              can use the object listing to help  understand  the  performance
              characteristics  of the generated code and to diagnose execution
              problems.

              offset | nooffset
                   Changes the offset of the PDEF header  from  00000  to  the
                   offset of the start of the text area.

              Specifying   ‐qlist  without  the  suboption  is  equivalent  to
              list=nooffset.

              Default: −qnolist

       ‐qlistopt | ‐qnolistopt
              Produces a compiler listing that displays all the  options  that
              were in effect when the compiler was invoked.

              Default: −qnolistopt

       ‐qphsinfo | ‐qnophsinfo
              Reports the time taken in each compilation phase. Phase informa‐
              tion is sent to standard output. The output takes the form <num‐
              ber1>/<number2>  for  each  phase where <number1> represents the
              CPU time used by the compiler and <number2> represents the total
              of  the  compiler time and the time that the CPU spends handling
              system calls.

              Default: −qnophsinfo

       ‐qnoprint
              Prevents the compiler from creating the listing file, regardless
              of the settings of other listing options.

       ‐qreport[={smplist|hotlist}] | ‐qnoreport
              Determines whether to produce transformation reports showing how
              the program is parallelized and how loops are optimized.  Subop‐
              tions are:

              smplist | hotlist
                   smplist produces a report showing how the program is paral‐
                   lelized.
                   hotlist produces a report  showing  how  loops  are  trans‐
                   formed.

              Specifying  ‐qreport  with  no suboptions is equivalent to ‐qre‐
              port=hotlist.

              Default: −qnoreport

       ‐qsource | ‐qnosource
              Produces a compiler listing that includes source code.

              Default: −qnosource

       ‐qsuppress[={<msg_nums_list>|cmpmsg}] | ‐qnosuppress
              Determines which messages to suppress from  the  output  stream.
              The suboptions are:

              <msg_nums_list>
                   A colon‐separated list of 7‐digit compiler message numbers.
              cmpmsg
                   Suppresses the informational messages that report  compila‐
                   tion progress and a successful completion.

              Default: −qnosuppress

       ‐v     Instructs  the compiler to report information on the progress of
              the compilation, and names the programs being invoked within the
              compiler and the options being specified to each program. Infor‐
              mation is displayed in a comma‐separated list.

       ‐V     Instructs the compiler to report information on the progress  of
              the compilation, and names the programs being invoked within the
              compiler and the options being specified to each program. Infor‐
              mation is displayed in a space‐separated list.

       ‐qversion[=verbose] | ‐qnoversion
              Displays  the  official  compiler  product name and the compiler
              version found on the system.

              verbose
                   Displays the official product name and a list  of  compiler
                   and  runtime  filesets along with their corresponding level
                   in  both  version,  release,  modification  and  fix  level
                   (V.R.M.F)  and YYYYMM format, where YYYY is the year and MM
                   is the month that the PTF is released.
                   If the fileset installed is at the BASE level, the  version
                   will be reported as "BASE" instead of YYYYMM.

              Default: ‐qnoversion

       ‐w     Suppresses informational, language‐level and warning messages.
              Specifying this option is equivalent to specifying ‐qflag=e:e.

       ‐qxref[=full] | ‐qnoxref
              Specifies  whether to produce a compiler listing that includes a
              cross‐reference listing of all identifiers.
              Specifying ‐qxref will report only identifiers  that  are  used,
              ‐qxref=full reports all identifiers in the program, and ‐qnoxref
              does not report any identifiers in the  program.  The  ‐qnoprint
              option overrides this option.

              Default: −qnoxref

Optimization and tuning options
       ‐qalias=<suboptions_list>
              Indicates  whether  a  program  contains  certain  categories of
              aliasing to determine whether  certain  optimizations  are  per‐
              formed.  <suboptions_list> is a colon‐separated list of the fol‐
              lowing suboptions:

              aryovrlp | noaryovrlp
                   When enabled the  program  contains  array  assignments  of
                   overlapping or storage‐associated arrays.
                   Default: aryovrlp
              intptr | nointptr
                   When enabled, the program contains integer pointer declara‐
                   tions.
                   Default: nointptr
              pteovrlp | nopteovrlp
                   When selected, the program contains pointee variables  that
                   refer  to  non‐pointee  variables, or two pointee variables
                   that refer to the same storage location.
                   Default: pteovrlp
              std | nostd
                   When selected, the program contains only  standard‐conform‐
                   ing aliasing.
                   Default: std

              Default:
                   ·  ‐qalias=aryovrlp:nointptr:pteovrlp:std  for  the  xlf90,
                   xlf90_r, f90, xlf95, xlf95_r, f95, xlf2003,  xlf2003_r  and
                   f2003 invocation commands.
                   ·  ‐qalias=aryovrlp:intptr:pteovrlp:std for the xlf, xlf_r,
                   f77, and fort77 invocation commands.

       ‐qarch=<suboption>
              Specifies the general processor architecture for which the  code
              (instructions)  should  be  generated.   In  general, the ‐qarch
              option allows you to target a specific architecture for the com‐
              pilation.   For  any given ‐qarch setting, the compiler defaults
              to a specific, matching ‐qtune setting, which can provide  addi‐
              tional performance improvements.  The suboptions are:

              auto
                   Automatically detects the specific architecture of the com‐
                   piling machine. It assumes that the  execution  environment
                   will be the same as the compilation environment.
              pwr3
                   Produces  an  object that contains instructions that run on
                   the POWER3 hardware platforms.
              pwr4
                   Produces an object that contains instructions that  run  on
                   the POWER4 hardware platforms.
              pwr5
                   Produces  an  object that contains instructions that run on
                   the POWER5 hardware platforms.
              pwr5x
                   Produces an object that contains instructions that  run  on
                   the POWER5+ hardware platforms.
              pwr6
                   Produces  object code containing instructions that will run
                   on the POWER6 hardware platforms running in  POWER6  archi‐
                   tected mode.
              pwr6e
                   Produces  object code containing instructions that will run
                   on the POWER6 hardware  platforms  running  in  POWER6  raw
                   mode.
              ppc
                   Produces  an  object that contains instructions that run on
                   any of the 32‐bit PowerPC hardware  platforms.  Using  ‐q64
                   with ppc upgrades the architecture to ppc64.
              ppc64
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware  platform.  When  compiled  in  32‐bit  mode,  the
                   resulting object code may include instructions that are not
                   recognized or behave differently when run on 32‐bit PowerPC
                   platforms.
              ppcgr
                   In  32‐bit  mode,  produces object code containing optional
                   graphics instructions for PowerPC hardware platforms.
                   In 64‐bit mode, produces object  code  containing  optional
                   graphics instructions that will run on 64‐bit PowerPC plat‐
                   forms, but not on 32‐bit‐only platforms.  Using  ‐q64  with
                   ppcgr upgrades the architecture to ppc64gr.
              ppc64gr
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware  platform  that  supports  the  optional  graphics
                   instructions.
              ppc64grsq
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware platform that supports the optional  graphics  and
                   square root instructions.
              ppc64v
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware  platform  that  supports  the   optional   vector
                   instructions, such as a PowerPC 970.
              ppc970
                   Generates  instructions specific to PowerPC 970 processors.
              rs64b
                   Produces an object that contains instructions that  run  on
                   an RS64II hardware platform.
              rs64c
                   Produces  an  object that contains instructions that run on
                   an RS64III hardware platform.

              Default: −qarch=ppc64grsq

       ‐qassert={deps|nodeps|itercnt=<n>}
              Provides information about the program to help  fine‐tune  opti‐
              mizations. Suboptions include:

              deps
                   Loops can contain loop‐carried dependencies.
              nodeps
                   No loops contain any loop‐carried dependencies.
              itercnt=<n>
                   The iteration count of a typical loop is <n>.

              Default: −qassert=deps

       ‐qcache=<suboptions_list>
              Describes  the  cache configuration for a specific target execu‐
              tion machine, where <suboptions_list> is a colon‐separated  list
              of one or more of the following suboptions:

              assoc=<number>
                   Specifies  the  set associativity of the cache, where <num‐
                   ber> is one of the following:
                        0         Direct‐mapped cache
                        1         Fully associative cache
                        (n > 1)   n‐way set associative cache
              auto
                   Automatically detects the specific cache  configuration  of
                   the  compiling machine. It assumes that the execution envi‐
                   ronment will be the same as the compilation environment.
              cost=<cycles>
                   Specifies the performance penalty, in CPU cycles, resulting
                   from a cache miss.
              level=<level>
                   Specifies  which level of cache is affected, where level is
                   one of the following::
                        1     Basic cache
                        2     Level‐2 cache
                        3     Table Lookaside Buffer (TLB)
                   If a machine has more than one level of cache, use a  sepa‐
                   rate ‐qcache option.
              line=<bytes>
                   Specifies the line size of the cache.
              size=<Kbytes>
                   Specifies the total size of the cache.
              type=<cache_type>
                   The  settings  apply  to the specified type of cache, where
                   <cache_type> is one of the following:
                        C or c = Combined data and instruction cache
                        D or d = Data cache
                        I or i = Instruction cache

              Default:
                   The ‐qtune setting determines the optimal  default  ‐qcache
                   settings  for most typical compilations. ‐O4, ‐O5, or ‐qipa
                   must be specified with the ‐qcache option.

       ‐qcompact | ‐qnocompact
              Reduces code size where possible, at the  expense  of  execution
              speed.  Code  size  is  reduced by inhibiting optimizations that
              replicate or expand code inline. This option takes  effect  only
              if ‐O2 or higher is also used.

              Default: −qnocompact

       ‐qdirectstorage | ‐qnodirectstorage
              Informs  the compiler that write‐through‐enabled or cache‐inhib‐
              ited storage may be referenced.

              Default: ‐qnodirectstorage

       ‐qenablevmx | ‐qnoenablevmx
              Enables the generation of  vector  instructions  for  processors
              that  support  them. These instructions can offer higher perfor‐
              mance when used with algorithmic‐intensive tasks such as  multi‐
              media applications.
              For  ‐qenablevmx  to  have effect, the architecture specified by
              the ‐qarch option must support vector instructions.

              Default: −qenablevmx

       ‐qessl | ‐qnoessl
              Specifies that, if either ‐lessl or ‐lesslsmp  are  also  speci‐
              fied,  then Engineering and Scientific Subroutine Library (ESSL)
              routines should be used in place of some  Fortran  90  intrinsic
              procedures when there is a safe opportunity to do so.

              Default: −qnoessl

       ‐qfdpr | ‐qnofdpr
              Collects  information  about programs for use with the IBM Feed‐
              back Directed Program  Restructuring  (FDPR)  performance‐tuning
              utility.

              Default: −qnofdpr

       ‐qhot[=<suboption>] | ‐qnohot
              Specifies  whether  or not to perform high‐order transformations
              during optimization. The suboptions are:

              arraypad[=<number>] | noarraypad
                   When <number> is specified, the  compiler  will  pad  every
                   array  in the code. The pad amount must be a positive inte‐
                   ger value. Otherwise, the  compiler  will  pad  any  arrays
                   where it infers that there may be a benefit.
              level={0|1}
                   Specifies the level of high‐order transformation to perform
                   during compilation.
                   0
                        The compiler  performs  a  subset  of  the  high‐order
                        transformations. Some of these include early distribu‐
                        tion, loop interchange, and loop tiling, as  examples.
                        Optimization level ‐O3 implies ‐qhot=level=0.
                   1
                        At  level=1,  full  high‐order  transformation is per‐
                        formed. ‐qhot=level=1 is equivalent to ‐qhot  and  the
                        compiler   options   that   imply   ‐qhot  also  imply
                        ‐qhot=level=1,  unless  ‐qhot=level=0  is   explicitly
                        specified.
              simd | nosimd
                   Converts certain operations in a loop that apply to succes‐
                   sive elements of an array into a vector instruction.   This
                   call  calculates  several  results  at  one  time, which is
                   faster than calculating each result  sequentially.  If  you
                   specify  ‐qhot=nosimd,  the compiler performs optimizations
                   on loops and arrays, but avoids replacing certain code with
                   vector  instructions.  To enable ‐qhot=simd, you must spec‐
                   ify an architecture that supports vector instructions.
              vector | novector
                   When specified with ‐qnostrict and ‐qignerrno, or an  opti‐
                   mization level of ‐O3 or higher (otherwise ‐qhot=vector has
                   no effect), the compiler converts certain operations  in  a
                   loop  that  apply to successive elements of an array into a
                   call to a routine in the Mathematical Acceleration  Subsys‐
                   tem (MASS) library, part of the libxlopt.a library.
                   If  you specify ‐qhot=novector, the compiler performs opti‐
                   mizations on loops and arrays, but avoids replacing certain
                   code with calls to vector library routines.

              Specifying   ‐qhot   without  suboptions  implies  ‐qhot=nosimd,
              −qhot=noarraypad,  ‐qhot=vector  and  ‐qhot=level=1.  The  ‐qhot
              option is also implied by ‐qsmp, ‐O4 and ‐O5.

              Default: −qnohot

       ‐qipa[=<suboptions_list>] | ‐qnoipa
              Turns  on or customizes a class of optimizations known as inter‐
              procedural analysis (IPA). <suboptions_list>  is  a  colon‐sepa‐
              rated list of the following suboptions:

              clonearch=<arch_name> | noclonearch
                   Specifies  the architectures for which multiple versions of
                   the same instruction set are produced, where <arch_name> is
                   a comma‐separated list of architecture names. Use this sub‐
                   option if you require optimal performance on multiple  dif‐
                   fering  machines running the same copy of your application.
              cloneproc=<function_name> | nocloneproc=<function_name>
                   Specifies the name of the functions to clone for the archi‐
                   tectures specified by the clonearch suboption, where <func‐
                   tion_name> is a comma‐separated list of function names.
              exits=<procedures>
                   Specifies names of functions which represent program exits.
                   <procedures> is a comma‐separated list of procedures.
              inline[=<suboption>]
                   Specifying  ’inline’  with  no  suboption  asserts that all
                   appropriate procedures will be inlined. <suboption> can  be
                   one of the following:
                   auto|noauto
                        Enables or disables automatic function inlining by the
                        high‐level optimizer.  When  ‐qipa=inline=auto  is  in
                        effect,  the compiler considers all functions that are
                        under the maximum size limit (see below) for inlining.
                        When −qipa=inline=noauto is in effect, only procedures
                        listed in the <procedures>  suboption  are  considered
                        for inlining.
                   <procedures>
                        Specifies  a  comma‐separated  list  of  procedures to
                        attempt to inline.
                   limit=<num>
                        Specifies a limit on the size of  a  calling  function
                        after   inlining.   This   only   takes   effect  when
                        inline=auto is on. If you do not specify a  value  for
                        <num>, <num> is 8192 by default.
                   threshold=<num>
                        Specifies  the  upper  size  limit  on  procedures  to
                        inline. This only takes effect when inline=auto is on.
                        If you do not specify a value for <num>, <num> is 1024
                        by default.
                   Default: auto
              noinline[=<procedures>]
                   Specifies a comma‐separated list of  procedures  which  are
                   not  to  be  inlined.  Specifying  noinline without <proce‐
                   dures>, asserts that no procedures are to be inlined.
              isolated=<procedures>
                   Specifies a comma‐separated list of procedures that are not
                   compiled with ‐qipa and do not directly refer to any global
                   variable.
              level=<level>
                   Determines the amount of IPA analysis and optimization per‐
                   formed, where <level> can be equal to:
                   0
                        Performs  only  minimal  interprocedural  analysis and
                        optimization.
                   1
                        Turns on inlining, limited alias analysis, and limited
                        call‐site tailoring.
                   2
                        Full interprocedural data flow and alias analysis.
                   Default: 1
              list[={<file_name>|short|long}]
                   Specifies  an  output  listing  file  name  during the link
                   phase. The default name is "a.lst".  Specifying  ’long’  or
                   the  listing  file to determine which listing sections will
                   be included.
                   Default: short
              lowfreq=<procedures>
                   Specifies a comma‐separated list  of  procedures  that  are
                   likely  to  be  called  infrequently during the course of a
                   typical program run.
              missing={unknown|safe|isolated|pure}
                   Specifies the default assumption for  procedures  not  com‐
                   piled with ‐qipa.
                   unknown
                        Greatly  restricts the amount of interprocedural opti‐
                        mization for calls to unknown functions.
                   safe
                        Functions which do not indirectly call a visible  (not
                        missing)  function either through direct call or func‐
                        tion pointer.
                   isolated
                        Functions which do not directly reference global vari‐
                        ables accessible to visible functions.
                   pure
                        Functions which are safe and isolated and which do not
                        indirectly alter storage accessible to functions.
                   Default: missing=unknown
              object | noobject
                   Specifies whether to include standard object  code  in  the
                   object   files.  Specifying  ’noobject’  can  substantially
                   reduce overall compile time by not generating  object  code
                   during the first IPA phase.
              partition={small|medium|large}
                   Specifies  the  size  of program sections that are analyzed
                   together. Larger partitions may produce better analysis but
                   require more storage.
                   Default: partition=medium
                   pure=<procedures>
                        Specifies  a  comma‐separated  list  of procedures not
                        compiled with ‐qipa and that are  "isolated",  "safe",
                        and do not modify any data objects that are visible to
                        the caller.
                   safe=<procedures>
                        Specifies a comma‐separated  list  of  procedures  not
                        compiled  with  ‐qipa  and  that do not call any other
                        part of the program.
                   stdexits | nostdexits
                        Specifies that compiler‐defined exit routines  can  be
                        optimized  as  with  the "exits" suboption. The proce‐
                        dures are abort, exit, _exit, and _assert.
                        Default: nostdexits
                   threads[=<suboption>] | nothreads
                        Runs portions of the IPA optimization  process  during
                        pass  2  in  parallel  threads, which can speed up the
                        linking process on  multi‐processor  systems.  <subop‐
                        tion> can be one of the following:
                        auto | noauto
                             When  auto  is  in effect, the compiler selects a
                             number of threads heuristically based on  machine
                             load.  When  noauto  is  in  effect, the compiler
                             spawns one thread per machine processor.
                        <number>
                             Instructs the compiler to use a  specific  number
                             of  threads. <number> can be any integer value in
                             the range of 1 to  32767.  However,  <number>  is
                             effectively  limited  to the number of processors
                             available on your system.
                        Specifying  threads   with   no   suboptions   implies
                        threads=auto.
                        Default: ‐qipa=threads
                   unknown=<procedures>
                        Specifies  a  comma‐separated  list of procedures that
                        are not compiled with ‐qipa and that may update global
                        variables  and dummy arguments and call other parts of
                        the program compiled with ‐qipa.
                   <file_name>
                        Specifies the name of a file that  contains  suboption
                        information in a special format.

                   Regular expressions are supported when specifying procedure
                   names for these suboptions:
                   cloneproc, nocloneproc, exits, inline, noinline,  isolated,
                   lowfreq, pure, safe, unknown.

                   Default:
                        · ‐qnoipa
                        ·   ‐qipa=inline=auto:level=1:missing=unknown:  parti‐
                        tion=medium:threads=auto when ‐O4 is in effect.
                        ·  ‐qipa=inline=auto:level=2:missing=unknown:   parti‐
                        tion=medium:threads=auto when ‐O5 is in effect.
                        ·   ‐qipa=inline=auto:level=0:missing=unknown:  parti‐
                        tion=medium:threads=auto when ‐qpdf1 or ‐qpdf2  is  in
                        effect.

       ‐qlibansi | ‐qnolibansi
              Assumes  that  all  functions with the name of an ANSI C defined
              library function are, in fact, the library functions.

              Default: −qnolibansi

       ‐qlibposix | ‐qnolibposix
              Assumes that all functions with the name of an IEEE  1003.1‐2001
              (POSIX)  defined library function are, in fact, the system func‐
              tions.

              Default: −qnolibposix

       ‐qmaxmem=<size>
              Limits the amount of memory  used  by  certain  memory‐intensive
              optimizations  to <size> kilobytes. When <size> is ‐1, the opti‐
              mizer will use as much memory as needed.

              Default:
                   · ‐qmaxmem=8192 when ‐O2 level optimization is set.
                   · ‐qmaxmem=‐1 when ‐O3 level  or  greater  optimization  is
                   set.

       ‐qminimaltoc | ‐qnominimaltoc
              Avoids  Table  of  Contents (TOC) overflow conditions by placing
              TOC entries into a separate data section for each  object  file.
              By  default,  the  compiler will allocate at least one TOC entry
              for each unique non‐automatic variable reference  in  your  pro‐
              gram.

              Default: −qnominimaltoc

       ‐O[<level>]
              Optimizes code at a choice of levels during compilation. This is
              equivalent to −qoptimize[=<level>]. <level> can be:

              0
                   Performs only quick local optimizations  such  as  constant
                   folding and elimination of local common subexpressions.
              2
                   Performs optimizations that the compiler developers consid‐
                   ered the best combination for compilation speed and runtime
                   performance.  The  optimizations  may  change  from product
                   release to release.
              3
                   Performs some memory and compile‐time  intensive  optimiza‐
                   tions  in addition to those executed with ‐O2. The −O3 spe‐
                   cific optimizations have the potential to alter the  seman‐
                   tics  of a program. The compiler guards against these opti‐
                   mizations at ‐O2 and the option ‐qstrict is provided at ‐O3
                   to turn off these aggressive optimizations.
                   Specifying ‐O3 implies ‐qhot=level=0.
              4
                   This option is the same as ‐O3, but also:
                     ·  sets the ‐qarch and ‐qtune options to the architecture
                     of the compiling machine.
                     · sets the ‐qcache option most appropriate to the charac‐
                     teristics of the compiling machine.
              5
                   Equivalent to ‐O4 ‐qipa=level=2.

              Specifying ‐O with no <level> is equivalent to specifying −O2.

              Default: −O0

       ‐qoptimize[=<level>] | ‐qnooptimize
              The long form of the ‐O option. ‐qoptimize=<level> is equivalent
              to ‐O<level>. See the ‐O option.

              Default: −qnooptimize

       ‐p[g]  Sets up the object files produced by the compiler for profiling.
              ‐pg is like ‐p, but it produces more extensive statistics.

       ‐qpdf1[=pdfname=<file_path] | ‐qnopdf1
              Tunes  optimizations  through  profile‐directed  feedback (PDF),
              where results from sample program execution are used to  improve
              optimization  near  conditional  branches and in frequently exe‐
              cuted code sections.
              Used with a minimum optimization level of ‐O2,  ‐qpdf1  produces
              an  object  that  is  instrumented  to collect runtime execution
              information. This is phase 1 of  the  profile‐directed  feedback
              optimization process.

              pdfname=<file_path>
                   Specifies  the  location  and name of the profile data file
                   containing the PDF profiling information.
                   Default:
                     If you do not specify <file_path>, the default file  name
                     is  ._pdf  and  the  file is saved in the current working
                     directory, or in the directory named by the PDFDIR  envi‐
                     ronment variable, if it is set.

              Default: −qnopdf1

       ‐qpdf2[=pdfname=<file_path>] | ‐qnopdf2
              Tunes  optimizations  through  profile‐directed  feedback (PDF),
              where results from sample program execution are used to  improve
              optimization  near  conditional  branches and in frequently exe‐
              cuted code sections.
              Used with a minimum optimization  level  of  ‐O2,  ‐qpdf2  tunes
              application  performance  using  the data generated by running a
              program compiled with ‐qpdf1. This is phase 2  of  the  profile‐
              directed feedback optimization process.

              pdfname=<file_path>
                   Specifies  the  location  and name of the profile data file
                   containing the PDF profiling information.
                   Default:
                     If you do not specify <file_path>, the default file  name
                     is  ._pdf  and  the  file is saved in the current working
                     directory, or in the directory named by the PDFDIR  envi‐
                     ronment variable, if it is set.

              Default: −qnopdf2

       ‐qprefetch | ‐qnoprefetch
              Enables  generation of prefetching instructions such as dcbt and
              dcbz in compiled code.

              Default: −qprefetch

       ‐Q[<suboption>]
              Specifies whether  Fortran  90  or  Fortran  95  procedures  are
              inlined and/or the names of particular procedures that should or
              should not be inlined.

              This option can take the form:

              ‐Q
                   Attempts to inline all appropriate functions with  20  exe‐
                   cutable  source statements or fewer, subject to the setting
                   of any of the suboptions to the ‐Q option. If ‐Q is  speci‐
                   fied last, all functions are inlined.
              ‐Q!
                   Does not inline any functions. If ‐Q! is specified last, no
                   functions are inlined.
              ‐Q‐<names>
                   Does not inline functions listed in <names>, where  <names>
                   is  a colon‐separated list. All other appropriate functions
                   are inlined. The option implies ‐Q.
              ‐Q+<names>
                   Attempts to inline the functions listed in  <names>,  where
                   <names>  is  a  colon‐separated list. All other appropriate
                   functions are inlined.

              Default: −Q!

       ‐qshowpdf | ‐qnoshowpdf
              Used with ‐qpdf1 and a minimum optimization level of ‐O2 to  add
              additional call and block count profiling information to an exe‐
              cutable.

              Default: −qnoshowpdf

       ‐qsmallstack[=<suboption>] | ‐qnosmallstack
              Specifies that the compiler will minimize stack usage where pos‐
              sible. This option can take the form:

              ‐qsmallstack
                   Enables only general small stack transformations.
              ‐qsmallstack=dynlenonheap
                   Asserts  that  automatic  variables  which are dynamically‐
                   sized are allocated from the heap and enables general small
                   stack transformations.
              ‐qsmallstack=nodynlenonheap
                   Disables dynamic‐length variable allocation.
              ‐qnosmallstack
                   Disables only the general small stack transformations.

              Default: ‐qnosmallstack

       ‐qsmp[=<suboptions_list>] | ‐qnosmp
              Enables  parallelization of program code. <suboptions_list> is a
              colon‐separated list of one or more of the following suboptions:

              auto | noauto
                   Enables  automatic  parallelization  and  optimization.  If
                   noauto is specified, automatic parallelization  of  program
                   code is disabled; only program code explicitly parallelized
                   with OpenMP directives is optimized.
                   Default: auto
              nested_par | nonested_par
                   If nested_par is specified,  prescriptive  nested  parallel
                   constructs are parallelized by the compiler.
                   Default: nonested_par
              omp | noomp
                   Enables  strict OpenMP compliance. Only OpenMP paralleliza‐
                   tion pragmas are recognized.
                   Default: noomp
              opt | noopt
                   Enables automatic parallelization but disables optimization
                   of  parallelized program code. If noopt is specified, opti‐
                   mization of parallelized program code is disabled.
                   Default: opt
              rec_locks | norec_locks
                   Specifies whether to use recursive locks.
                   Default: norec_locks
              schedule=<type>
                   Specifies what kinds of scheduling algorithms and  chunking
                   are  used  for loops to which no other scheduling algorithm
                   has been explicitly assigned in the source code. <type> can
                   be:
                     · affinity[=<num>]
                     · dynamic[=<num>]
                     · guided[=<num>]
                     · runtime
                     · static[=<num>],
                   where <num> is the number of loop iterations.
                   Default: schedule=runtime
              stackcheck | nostackcheck
                   Causes  the  compiler  to check for stack overflow by slave
                   threads at run time, and issue a warning if  the  remaining
                   stack  size  is  less than the number of bytes specified by
                   the stackcheck option of the  XLSMPOPTS  environment  vari‐
                   able.  This  suboption  is intended for debugging purposes,
                   and only takes effect  when  XLSMPOPTS=stackcheck  is  also
                   set.
                   Default: nostackcheck
              threshold[=<num>]
                   When  ‐qsmp=auto is in effect, controls the amount of auto‐
                   matic loop parallelization that occurs. The value of  <num>
                   represents the lower limit allowed for parallelization of a
                   loop, based on the level of "work" present in a loop.
                   Default:
                     <num> must be a positive integer of 0 or greater. If  you
                     specify  threshold  with no suboption, the program uses a
                     default value of 100.

              Specifying ‐qsmp without suboptions is equivalent to
              ‐qsmp=auto:noomp:opt:norec_locks:nonested_par:
              schedule=runtime:nostackcheck:threshold=100

              Default: −qnosmp

       ‐qstacktemp=<num>
              Determines where to allocate applicable compiler temporaries  at
              run time. The allocation depends on the value of <num>. The val‐
              ues are:

              0
                   Indicates that the compiler will decide whether to allocate
                   the  applicable  compiler  temporaries  on  the heap or the
                   stack.
              ‐1
                   Indicates that applicable compiler temporaries  are  to  be
                   always  allocated on the stack. This is the best‐performing
                   setting but uses the most amount of stack storage.
              (1 or greater)
                   Indicates that applicable compiler  temporaries  less  than
                   this  value  (bytes)  should  be allocated on the stack and
                   those greater than or equal to this value should  be  allo‐
                   cated on the heap.

              Default: −qstacktemp=0

       ‐qstrict | ‐qnostrict
              Turns  off  aggressive optimizations which have the potential to
              alter   the   semantics   of   your   program.   ‐qstrict   sets
              ‐qfloat=nofltint:norsqrt.  ‐qnostrict  sets  −qfloat=rsqrt. This
              option is only valid with ‐O2 or higher optimization levels.

              Default:
                   · ‐qnostrict at ‐O3 or higher.
                   · ‐qstrict otherwise.

       ‐qstrict_induction | ‐qnostrict_induction
              Turns off loop induction variable optimizations  that  have  the
              potential to alter the semantics of your program.

              Default:
                   · ‐qnostrict_induction at ‐O2 or higher.
                   · ‐qstrict_induction otherwise.

       ‐qtune=<suboption>
              Specifies  the architecture system for which the executable pro‐
              gram is optimized.
              <suboption> must be one of the following:

              auto
                   Generates object code optimized for the  hardware  platform
                   on which the program is compiled.
              balanced
                   Optimizations  are  tuned across a selected range of recent
                   hardware.
              ppc970
                   Generates instructions specific  to  PowerPC  970  hardware
                   platforms.
              pwr3
                   Generates  object  code  optimized  for the POWER3 hardware
                   platforms.
              pwr4
                   Generates object code optimized  for  the  POWER4  hardware
                   platforms.
              pwr5
                   Generates  object  code  optimized  for the POWER5 hardware
                   platforms.
              pwr6
                   Generates object code optimized  for  the  POWER6  hardware
                   platforms.
              rs64b
                   Generates object code optimized for the RS64II processor.
              rs64c
                   Generates  object code optimized for the RS64III processor.

              Default: −qtune=balanced

       ‐qunroll[={auto|yes}] | ‐qnounroll
              Unrolls inner loops in the program. This can help  improve  pro‐
              gram performance.

              auto
                   Instructs the compiler to perform basic loop unrolling.
              yes
                   Instructs the compiler to search for more opportunities for
                   loop unrolling than that performed with auto.  In  general,
                   this  suboption  is more likely to increase compile time or
                   program size than auto processing, but it may also  improve
                   your application’s performance.

              Default:
                   −qunroll=auto  if  ‐qunroll is not specified on the command
                   line.

       ‐qunwind | ‐qnounwind
              Informs the compiler that the stack can be unwound while a  rou‐
              tine  in  the  compilation  is active. Specifying ‐qnounwind can
              improve the optimization  of  non‐volatile  register  saves  and
              restores.

              Default: −qunwind

       ‐qzerosize | ‐qnozerosize
              Improves performance of some programs by preventing checking for
              zero‐sized character strings and arrays.

              Default:
                   · ‐qzerosize for the xlf90, xlf90_r, f90,  xlf95,  xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.
                   ·  ‐qnozerosize  for the xlf, xlf_r, f77 and fort77 invoca‐
                   tion commands.

Linking options
       ‐qbigdata | ‐qnobigdata
              Allows initialized data to be larger than 16MB in 32‐bit mode.

              Default: −qnobigdata

       ‐L<dir>
              Searches the path directory for library files specified  by  the
              ‐l<key> option.

              Default:
                   The default is to search only the standard directories.

       ‐l<key>
              Searches  the  file  lib<key>.so and then lib<key>.a for dynamic
              linking, or only lib<key>.a for static linking.

              Default:
                   The default is to search only some of the compiler  runtime
                   libraries.

Portability and migration options
       ‐qalign=<suboption>
              Specifies the alignment of data objects in storage to avoid per‐
              formance problems with misaligned data. Suboptions include:

              4k | no4k
                   Specifies whether to align large data objects  on  page  (4
                   KB)  boundaries, for improved performance with data‐striped
                   I/O.
              bindc=<suboption>
                   Specifies that the alignment and padding for an XL  Fortran
                   derived  type with the BIND(C) attribute is compatible with
                   a C struct type that is compiled with the corresponding  XL
                   C alignment option. The compatible alignment options are:
                     · ‐qalign=bindc=bit_packed
                     (The corresponding XL C option is ‐qalign=bit_packed.)
                     · ‐qalign=bindc=linuxppc
                     (The corresponding XL C option is ‐qalign=linuxppc.)
              struct=natural
                   Objects of a derived type declared using a STRUCTURE decla‐
                   ration are stored such that each component of each  element
                   is stored on its natural alignment boundary, unless storage
                   association requires otherwise.
              struct=packed
                   Objects of a derived type declared using a STRUCTURE decla‐
                   ration  are  stored with no space between components, other
                   than any padding represented by %FILL components.
              struct=port
                   Storage padding is the same  as  described  above  for  the
                   struct=natural suboption, except that the alignment of com‐
                   ponents of type complex is the same  as  the  alignment  of
                   components  of  type real of the same kind. The padding for
                   an object that  is  immediately  followed  by  a  union  is
                   inserted  at  the  beginning of the first map component for
                   each map in that union.

              Default: −qalign=no4k:struct=natural:bindc=linuxppc

       ‐qctyplss[={arg|noarg}] | ‐qnoctyplss
              Specifies whether character  constant  expressions  are  allowed
              wherever typeless constants may be used.

              arg
                   This  suboption provides the same behavior as the ‐qctyplss
                   option with no suboptions, with the  exception  that  if  a
                   Hollerith  constant  is  used  as an actual argument, it is
                   passed to the procedure as if it  were  an  integer  actual
                   argument.
              noarg
                   This  suboption provides the same behavior as the ‐qctyplss
                   option with no suboptions.

              Default: −qnoctyplss

       ‐qddim | ‐qnoddim
              Specifies that the bounds of  pointee  arrays  are  re‐evaluated
              each  time  the  arrays are referenced and removes some restric‐
              tions on the bounds expressions for pointee arrays.

              Default: −qnoddim

       ‐qdescriptor[={v1|v2}]
              Specifies which descriptor format the compiler will use for non‐
              object‐oriented compiler entities. The possible choices are:

              v1
                   All  object  code will use the version 1 descriptor format,
                   where possible, for backwards compatibility with V10.1  and
                   older XL Fortran object code.
              v2
                   All  object  code  will use the version 2 descriptor format
                   for all relevant code constructs.

              Default: ‐qdescriptor=v1

       ‐qescape | ‐qnoescape
              Specifies whether the backslash is treated as an escape  charac‐
              ter  in  character strings, Hollerith constants, H edit descrip‐
              tors, and character string edit descriptors.

              Default: −qescape

       ‐qextern=<procedures>
              Allows user‐written procedures to be called instead of  XL  For‐
              tran  intrinsics.  <procedures>  is a list of one or more colon‐
              separated procedure names. The procedure names are treated as if
              they  appear  in  an EXTERNAL statement in each compilation unit
              being compiled.

       ‐qextname[=<names>] | ‐qnoextname
              Adds a trailing underscore to the names of the  global  entities
              (external names) specified by <names>, a colon‐separated list of
              one or more names of global entities. If no names are specified,
              ‐qextname  adds  an  underscore to the names of all global enti‐
              ties, except for main program names.

              Default: −qnoextname

       ‐qlog4 | ‐qnolog4
              Specifies whether the result of a logical operation with logical
              operands is a LOGICAL(4) or is a LOGICAL with the maximum length
              of the operands.

              Default: −qnolog4

       ‐qmodule=mangle81
              Provides compatibility for module files that are  compiled  with
              Version  11.1 compiler to be linked to an existing set of object
              files compiled with the Version 8.1 compiler. The naming conven‐
              tion is not compatible with that used by version 8.1 of the com‐
              piler.

       ‐qport=<suboption> | ‐qnoport
              Increases flexibility when porting programs to XL Fortran,  pro‐
              viding a number of options to accommodate other Fortran language
              extensions. Suboptions include:

              clogicals | noclogicals
                   If you specify this option, the compiler  treats  all  non‐
                   zero integers that are used in logical expressions as TRUE.
                   You must specify  ‐qintlog  for  ‐qport=clogicals  to  take
                   effect.
                   Default: noclogicals
              hexint | nohexint
                   If  you  specify this option, typeless constant hexadecimal
                   strings are converted to integers  when  passed  as  actual
                   arguments  to the int intrinsic function. Typeless constant
                   hexadecimal strings not passed as actual arguments  to  INT
                   remain unaffected.
                   Default: nohexint
              mod |nomod
                   Specifying  this option relaxes existing constraints on the
                   MOD intrinsic function, allowing two arguments of the  same
                   data  type  parameter  to be of different kind type parame‐
                   ters. The result will be of the same type as the  argument,
                   but with the larger kind type parameter value.
                   Default: nomod
              nullarg | nonullarg
                   For an external or internal procedure reference, specifying
                   this option causes the compiler to treat an empty argument,
                   which  is  delimited by a left parenthesis and a comma, two
                   commas, or a comma and a right parenthesis, as a null argu‐
                   ment.  This suboption has no effect if the argument list is
                   empty.
                   Default: nonullarg
              sce | nosce
                   By default, the compiler performs short circuit  evaluation
                   in  selected  logical  expressions  using XL Fortran rules.
                   Specifying sce allows the compiler to  use  non‐XL  Fortran
                   rules.  The  compiler will perform short circuit evaluation
                   if the current rules allow it.
                   Default: nosce
              typestmt | notypestmt
                   The TYPE statement, which behaves in a  manner  similar  to
                   the  PRINT  statement, is supported whenever this option is
                   specified.
                   Default: notypestmt
              typlssarg | notyplssarg
                   Converts all typeless constants to default integers if  the
                   constants  are  actual  arguments to an intrinsic procedure
                   whose associated dummy arguments are of integer type. Dummy
                   arguments associated with typeless actual arguments of non‐
                   integer type remain unaffected by this option.
                   Default: notyplssarg

              Default: −qnoport

       ‐qswapomp | ‐qnoswapomp
              Specifies that the compiler  should  reorganize  and  substitute
              OpenMP routines in XL Fortran programs.

              Default: −qswapomp

       ‐qxflag=oldtab
              For  fixed source form programs, interprets a tab incolumns 1 to
              5 as a single character.

Compiler customization options
       ‐qalias_size=<bytes>
              Specifies the initial size (in bytes)  of  the  aliasing  table.
              This option has effect only when optimization is enabled.

       ‐B[<prefix>]
              Determines substitute path names for programs used during compi‐
              lation, such as the compiler,  assembler,  linkage  editor,  and
              preprocessor,  where <prefix> can be any program name recognized
              by the ‐t compiler option. The optional <prefix> defines part of
              a  path  name  to the new programs. The ‐t parameter, <program>,
              specifies the program to which the <prefix> is to  be  appended.
              When  specifying  <prefix>,  there must be a slash (/) after the
              folder name.

       ‐F[<config_file>][:<stanza>]
              Names an alternative configuration file (.cfg) for the compiler.
              <config_file>  is  the  name  of  a compiler configuration file.
              <stanza> is the name of the command used to invoke the compiler.
              This  directs  the compiler to use the entries under <stanza> in
              the <config_file> to set up the compiler environment.  At  least
              one of the arguments must be supplied.

       ‐NS<bytes>
              Specifies  the size of internal program storage areas, in bytes.

              Default: −NS512

       ‐qspillsize=<bytes>
              This is the long form of the ‐NS option. Refer to ‐NS  for  more
              information.

       ‐t<programs_list>
              Applies  the prefix from the ‐B option to the specified programs
              in <programs_list>. <programs_list> is a chain (i.e:  ‐tbcI)  of
              one or more of the following:

              a = Assembler
              b = Low‐level optimizer
              c = Compiler front end
              d = Disassembler
              F = C preprocessor
              I = High‐level optimizer ‐ compile step
              l = Linker
              z = Binder

       ‐W<program>,<options_list>
              Gives  the  specified  option(s)  to the compiler program, <pro‐
              gram>. <options_list> is a comma‐separated list of one  or  more
              options. <program> can be one of the following:

              a = Assembler
              b = Low‐level optimizer
              c = Compiler front end
              d = Disassembler
              F = C preprocessor
              h = Array language optimizer
              I = High‐level optimizer ‐ compile step
              l = Linker
              z = Binder


SEE ALSO
       showpdf(1), mergepdf(1), resetpdf(1), cleanpdf(1).

       For more information, refer to the following Web sites:
       http://www.ibm.com/software/awdtools/fortran/xlfortran/library/
       http://www.ibm.com/software/awdtools/fortran/xlfortran/support/


COPYRIGHT
       Licensed Materials ‐ Property of IBM.

       IBM XL Fortran Advanced Edition for Linux, V11.1.

       5724‐S74

       Copyright IBM Corp. 1991, 2007. All Rights Reserved.

       IBM,  POWER3,  POWER4,  POWER5,  POWER5+,  POWER6,  PowerPC and SAA are
       trademarks or registered trademarks of International Business  Machines
       Corporation in the United States, other countries, or both.

       Linux is a registered trademark of Linus Torvalds in the United States,
       other countries, or both.

       Windows is a trademarks of Microsoft Corporation in the United  States,
       other countries, or both.

       US  Government Users Restricted Rights ‐ Use, duplication or disclosure
       restricted by GSA ADP Schedule Contract with IBM Corp.



IBM                                  2007                               xlf(1)
xlf: 1501-216 (W) command option --version is not recognized - passed to ld
configure:14010: $? = 249
configure:13999: xlf -v >&5
exec: export(export,XL_CONFIG=/etc/opt/ibmcmp/xlf/11.1/xlf.cfg:xlf,NULL) 
exec: less(less,/opt/ibmcmp/xlf/11.1/msg/en_US/xlf.txt,NULL) 
xlf(1)         IBM XL Fortran Advanced Edition for Linux, V11.1         xlf(1)



NAME
       xlf,  xlf_r,  f77,  fort77,  xlf90,  xlf90_r, f90, xlf95, xlf95_r, f95,
       xlf2003, xlf2003_r, f2003 ‐ invoke the IBM XL Fortran compiler.


SYNTAX
       <invocation‐command> [ <option> | <inputfile> ] ...


DESCRIPTION
       The invocation commands compile Fortran source files.
       The commands and their recommended uses are described below.

       Invocations                   Usage (supported standards)
       _________________________________________________________

       xlf, xlf_r, f77,              Compile Fortran 77 source
       fort77                        files.

       xlf90, xlf90_r, f90           Compile Fortran 90 source
                                     files.

       xlf95, xlf95_r, f95           Compile Fortran 95 source
                                     files.

       xlf2003, xlf2003_r,           Compile Fortran 2003 source
       f2003                         files.

       The main difference between these commands is that they  use  different
       default  options (which are set in the configuration file /etc/opt/ibm‐
       cmp/xlf/11.1/xlf.cfg).
       See the Compiler Reference for more  information  on  these  invocation
       commands.

       All  invocations with a suffix of _r allow for thread‐safe compilation.
       Use these commands to create threaded applications or to link  programs
       that use multi‐threading.

       These  commands  also  process assembler source files and object files.
       The compiler calls the link  editor  to  produce  a  single  executable
       unless  you specify the compiler options that prevent object files from
       being linked.

       The input file may have any of the following suffixes:

        .f, .f77, .f90, .f95,        Fortran source file
        .f03

        .o or .a                     Object file for ld command

        .s                           Assembler source file

        .so                          Shared object file

        .F, .F77, .F90, .F95,        Fortran source file
        .F03                         with cpp preprocessor
                                     directives


OPTIONS
       Compiler options are categorized by their functions and may be used  to
       set  the  compiler  behavior.  Options  can  be flag options or keyword
       options.

       Keyword options are specified in one of the following ways:
       ‐q<option>
       ‐q<option>=<suboption>
       ‐q<option>=<suboption>:<suboption>

       Keyword options with no  suboptions  represent  switches  that  may  be
       either  on  or off. ‐qx turns the switch on, and −qnox turns the switch
       off. For example, ‐qsource tells the compiler to produce a source list‐
       ing  and ‐qnosource tells the compiler not to produce a source listing.

Output control options
       ‐c     Instructs the compiler to pass  source  files  to  the  compiler
              only. The compiled source files are not sent to the linker. This
              option produces an object  file,  file_name.o,  for  each  valid
              source file.

       ‐d     Keeps  temporary files produced by C preprocessor (cpp), instead
              of deleting them. By default, temporary files  produced  by  cpp
              are deleted.

       ‐qmoddir=<directory>
              Specifies  the  location  for  any  .mod files that the compiler
              writes.

              Default:
                   .mod files are placed in the current directory.

       ‐o <path>
              Specifies an output location for the object, assembler, or  exe‐
              cutable  files  created  by  the compiler. When the ‐o option is
              used during compiler invocation,  <path>  can  be  the  name  of
              either a file or a directory.

              Default: −o a.out

       ‐S     Generates  an assembler language file (.s) for each source file.
              The resulting .s files can be assembled  to  produce  object  .o
              files or an executable file (a.out).

Input control options
       ‐qcclines | ‐qnocclines
              Enables recognition of conditional compilation lines.

              Default:
                   · ‐qcclines if ‐qsmp=omp is specified.
                   · ‐qnocclines otherwise.

       ‐qci=<numbers>
              Activates  the specified INCLUDE lines. Specifies identification
              numbers (from 1 to 255) of conditional includes.

              Default: No default value

       ‐qcr | ‐qnocr
              Allows you to control how the compiler interprets the  CR  (car‐
              riage return) character. This allows you to compile code written
              using a Mac OS or DOS/Windows editor.

              Default: −qnocr

       ‐qdirective[=<directive_list>] | ‐qnodirective[=<directive_list>]
              Specifies sequences of characters, known as  trigger  constants,
              that identify comment lines as compiler comment directives.

              Default: −qnodirective

       ‐qfixed[=<right_margin>]
              Indicates  that the input source program is in fixed source form
              and optionally specifies the maximum line length.

              Default:
                   · ‐qfixed=72 for the xlf, xlf_r, f77, and fort77 invocation
                   commands.
                   ·  ‐qfree=f90  for the xlf90, xlf90_r, f90, xlf95, xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.

       ‐qfree[=f90|ibm]
              Indicates that the source code is free form.

              ibm
                   Specifies compatibility with the free source  form  defined
                   for VS FORTRAN.
              f90
                   Specifies  compatibility  with the free source form defined
                   for Fortran 90, Fortran 95 and Fortran 2003.

              Default:
                   · ‐qfixed=72 for the xlf, xlf_r, f77, and fort77 invocation
                   commands.
                   ·  ‐qfree=f90  for the xlf90, xlf90_r, f90, xlf95, xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.

       ‐I<directory_path>
              Adds a directory to the search path for #include files and  .mod
              files.  Before  checking the default directories for include and
              .mod files, the compiler checks each  directory  in  the  search
              path. For include files, this path is only used if the file name
              in an INCLUDE line is not provided with an absolute path.

              Default:
                   The following directories are searched,  in  the  following
                   order, after any paths that are specified by the ‐I option:
                   1) The current directory.
                   2) The directory where the source file is located.
                   3) /usr/include.

       ‐qmixed | ‐qnomixed
              The long form of the ‐U option. Makes the compiler  case  sensi‐
              tive for names.

              Default: −qnomixed

       ‐qsuffix=<suboption>=<suffix>
              Specifies the source‐file suffix on the command line. Suboptions
              include:

              f=<suffix>
                   where <suffix> is the new source‐file suffix.
              o=<suffix>
                   where <suffix> is the new object‐file suffix.
              s=<suffix>
                   where <suffix> is the new assembler source‐file suffix.
              cpp=<suffix>
                   where <suffix> is the new preprocessor source‐file  suffix.

       ‐U     Makes  the  compiler case sensitive for names. Suppresses lower‐
              case folding of Fortran code. By default,  the  compiler  inter‐
              prets all names as if they were in lowercase.

       ‐qxlines | ‐qnoxlines
              Specifies  whether  fixed source form lines with a X in column 1
              are compiled or treated as comments.

              Default: −qnoxlines

Language element control options
       ‐D     Specifies whether the compiler compiles fixed source form  lines
              with a D in column 1 or treats them as comments.

       ‐qdlines | ‐qnodlines
              The long form of the ‐D option.

              Default: −qnodlines

       ‐qlanglvl=<suboptions_list>
              Determines  which language standard (or superset, or subset of a
              standard) to consult for nonconformance. It  identifies  noncon‐
              forming  source code and also options that allow such nonconfor‐
              mances.
              <suboptions_list> is a colon‐separated  list  of  the  following
              suboptions:

              77std
                   Accepts  the  language  that  the  ANSI FORTRAN 77 standard
                   specifies and reports anything  else  using  language‐level
                   messages.
              90std
                   Accepts the language that the ISO Fortran 90 standard spec‐
                   ifies and reports anything else using  language‐level  mes‐
                   sages.
              90pure
                   The  same  as  90std  except that it also reports language‐
                   level messages for  any  obsolescent  Fortran  90  features
                   used.
              90ext
                   Obsolete suboption that is equivalent to extended. To avoid
                   problems in the future, use the extended suboption instead.
              95std
                   Accepts the language that the ISO Fortran 95 standard spec‐
                   ifies and reports anything else using  language‐level  mes‐
                   sages.
              95pure
                   The  same  as  95std  except that it also reports language‐
                   level messages for  any  obsolescent  Fortran  95  features
                   used.
              2003std
                   Accepts the language that the ISO Fortran 95 standard spec‐
                   ifies, as well as all Fortran 2003 features supported by XL
                   Fortran,  and  reports  anything  else using language‐level
                   messages.
              2003pure
                   The same as 2003std except that it also  reports  language‐
                   level  messages  for  any obsolescent Fortran 2003 features
                   used.
              extended
                   Accepts the full Fortran 95 language standard, all  Fortran
                   2003  features supported by XL Fortran, and all extensions,
                   effectively turning off language‐level checking.

              Default: ‐qlanglvl=extended

       ‐qmbcs | ‐qnombcs
              Specifies that string literals and comments can  contain  multi‐
              byte characters.

              Default: −qnombcs

       ‐qnullterm | ‐qnonullterm
              Appends  a  null  character to each character expression that is
              passed as a dummy argument, making it more  convenient  to  pass
              strings to C functions.

              Default: −qnonullterm

       ‐1     Executes  each  DO loop in the compiled program at least once if
              its DO statement is executed, even if the iteration count is  0.
              This is the short form of the ‐qonetrip option.

       ‐qonetrip | ‐qnoonetrip
              The long form of the ‐1 option.

              Default: −qnoonetrip

       ‐qposition={appendold|appendunknown}
              Positions  the  file pointer at the end of the file when data is
              written after an OPEN statement with no POSITION= specifier, and
              the  corresponding  STATUS=value  (OLD or UNKNOWN) is specified.
              The default setting depends on the I/O specifiers  in  the  OPEN
              statement and on the compiler invocation command.

              Default:
                   ·  ‐qposition=appendold  for the xlf, xlf_r, f77 and fort77
                   invocation commands.
                   · The defined Fortran 90 and Fortran 95 behaviors  for  the
                   xlf90,   xlf90_r,   f90,   xlf95,  xlf95_r,  f95,  xlf2003,
                   xlf2003_r and f2003 invocation commands.

       ‐qqcount | ‐qnoqcount
              Accepts the character‐count Q edit descriptor(Q) as well as  the
              extended‐precision  Q  edit  descriptor (Qw.d). With −qnoqcount,
              all Q edit descriptors are interpreted as the extended‐precision
              Q edit descriptor.

              Default: −qnoqcount

       ‐qsaa | ‐qnosaa
              Checks  for  conformance to the SAA Fortran language definition.
              It identifies nonconforming source code and  also  options  that
              allow such nonconformances.

              Default: −qnosaa

       ‐qsave[={all|defaultinit}] | ‐qnosave
              Specifies the default storage class for local variables.

              all
                   The  default  storage  class  for  all  local  variables is
                   STATIC. Specifying this suboption is the same as specifying
                   the ‐qsave option without any suboptions.
              defaultinit
                   The  default storage class is STATIC for local variables of
                   derived type that have default initialization specified.

              Default:
                   · ‐qsave for the xlf, xlf_r, f77 and fort77 invocation com‐
                   mands.
                   ·  ‐qnosave  otherwise.  ‐qnosave  sets the default storage
                   class to AUTOMATIC.

       ‐qsclk={centi|micro}
              Specifies the resolution that the SYSTEM_CLOCK intrinsic  proce‐
              dure uses in a program.

              centi
                   Uses centisecond resolution for the values returned.
              micro
                   Uses microsecond resolution.

              Default: −qsclk=centi

       ‐u     Specifies  that  no implicit typing of variable names is permit‐
              ted. It has the same effect as using the IMPLICIT NONE statement
              in each scope that allows implicit statements.

       ‐qxlf77=<settings>
              Provides  compatibility  with  Fortran  77  aspects  of language
              semantics and I/O data format that have changed. Most  of  these
              changes are required by the Fortran 90 standard.
              Suboptions include:

              blankpad | noblankpad
                   Pads  an  internal  or  direct‐access  file  if  the format
                   requires more characters than the record contains.
              gedit77 | nogedit77
                   Uses Fortran 77 semantics for the output  of  REAL  objects
                   with the G edit descriptor.
              intarg | nointarg
                   Converts  all  the integer arguments of an intrinsic proce‐
                   dure to the kind of the longest argument, if  they  are  of
                   different kinds.
              intxor | nointxor
                   Treats  .XOR. as a logical binary intrinsic operator rather
                   than a defined operator.
              leadzero | noleadzero
                   Produces a leading zero in realoutput under the D, E, F and
                   Q edit descriptors.
              oldboz | nooldboz
                   Turns  blanks  into zeros for data read by B, O, and Z edit
                   descriptors, regardless of the BLANK= specifier or  any  BN
                   or BZ control edit descriptors.
              persistent | nopersistent
                   Saves  the addresses of arguments to subprograms with ENTRY
                   statements in static storage.
              softeof | nosofteof
                   Allows READ and WRITE operations when a unit is  positioned
                   after  its  endfile  record,  unless  that  position is the
                   result of executing an ENDFILE statement.

              Default:
                   blankpad, nogedit77, nointarg, nointxor,  leadzero,  noold‐
                   boz, nopersistent, and nosofteof.

       ‐qxlf90=<suboption>
              Determines  whether  the compiler provides the Fortran 90 or the
              Fortran 95 level of support for certain aspects of the language.
              <suboption> can be one of the following:

              signedzero | nosignedzero
                   Determines  how  the SIGN(A,B) function handles signed real
                   0.0. In addition, determines whether negative internal val‐
                   ues  will  be  prefixed  with a minus when formatted output
                   would produce a negative sign zero.
              autodealloc | noautodealloc
                   Determines whether  the  compiler  deallocates  allocatable
                   arrays that are declared locally without either the SAVE or
                   the STATIC attribute and have a status of  currently  allo‐
                   cated when the subprogram terminates.
              oldpad | nooldpad
                   When the PAD=specifier is present in the INQUIRE statement,
                   specifying ‐qxlf90=nooldpad returns UNDEFINED when there is
                   no  connection,  or  when the connection is for unformatted
                   I/O. This behavior conforms to the Fortran 95 standard  and
                   above.  Specifying  ‐qxlf90=oldpad preserves the Fortran 90
                   behavior.

              Default:
                   · nosignedzero,  noautodealloc  and  oldpad  for  the  xlf,
                   xlf_r,  f77, fort77, xlf90, xlf90_r and f90 invocation com‐
                   mands.
                   · signedzero,  autodealloc  and  nooldpad  for  the  xlf95,
                   xlf95_r,  f95, xlf2003, xlf2003_r and f2003 invocation com‐
                   mands.

       ‐qxlf2003=<suboptions_list>
              Provides the ability to use language features introduced in  the
              Fortran 2003 standard.
              <suboptions_list>  is  a  colon‐separated list of one or more of
              the following suboptions:

              autorealloc | noautorealloc
                   Controls whether the compiler automatically reallocates the
                   left‐hand‐side  (LHS) with the shape of the right‐hand‐side
                   RHS when assigning into an allocatable variable. This  sub‐
                   option  has  no  effect  on reallocation when the values of
                   length type parameters in the LHS and RHS differ.
              bozlitargs | nobozlitargs
                   The bozlitargs suboption ensures that the passing  of  boz‐
                   literal  constants as arguments to the INT, REAL, CMPLX, or
                   DBLE intrinsic function conforms to the Fortran 2003  stan‐
                   dard.  The  ‐qlanglvl=2003pure  or ‐qlanglvl=2003std option
                   must  be  specified,  as  well.  If  ‐qport=typlssarg   and
                   −qxlf2003=bozlitargs  are  specified,  passing  boz‐literal
                   constants to the CMPLX intrinsic  will  yield  non‐standard
                   results.
              oldnaninf | nooldnaninf
                   When  oldnaninf is in effect, the compiler uses old XL For‐
                   tran behavior for output of IEEE NaN  and  infinity  excep‐
                   tional values in real or complex editing.
                   When  nooldnaninf  is in effect, the compiler uses the For‐
                   tran 2003 standard for output  of  IEEE  NaN  and  infinity
                   exceptional values in real or complex editing.
              polymorphic | nopolymorphic
                   When polymorphic is in effect, the compiler allows polymor‐
                   phic entities in Fortran  source  files  and  runtime  type
                   information  is generated for each derived type definition.
                   When nopolymorphic is in effect, polymorphic entities  can‐
                   not be specified in the Fortran source files and no runtime
                   type information is generated.
              signdzerointr | nosigndzerointr
                   When signdzerointr is in  effect,  the  passing  of  signed
                   zeros  to  the  SQRT,  LOG,  and  ATAN2 intrinsic functions
                   returns results consistent with the Fortran 2003  standard.
                   The  −qxlf90=signedzero  option must be in effect, as well.
                   For the xlf90, xlf77  and  xlf  invocations,  specify  both
                   options to have the Fortran 2003 behavior.
              stopexcept | nostopexcept
                   When  stopexcept is in effect, STOP statements will display
                   informational messages about signaling IEEE  floating‐point
                   exceptions.
                   When  nostopexcept is in effect, informational messages are
                   suppressed.
              volatile | novolatile
                   When volatile is in effect, a non‐VOLATILE entity  that  is
                   use‐  or  host‐associated  can  be specified as VOLATILE in
                   inner or local scope.

              Default:
                   ·  autorealloc,   bozlitargs,   nooldnaninf,   polymorphic,
                   signdzerointr,  stopexcept  and  volatile  for  the  f2003,
                   xlf2003, or xlf2003_r invocation commands.
                   · noautorealloc,  nobozlitargs,  oldnaninf,  nopolymorphic,
                   nosigndzerointr,  nostopexcept and novolatile for all other
                   invocation commands.

Floating‐point and integer control options
       ‐qautodbl=<suboption>
              Provides  an  automatic  means  of  converting  single‐precision
              floating‐point  calculations to double‐precision and of convert‐
              ing double‐precision  calculations  to  extended‐precision.  The
              suboptions are:

              none
                   Does not promote or pad any objects that share storage.
              dbl4
                   Promotes  floating‐point  objects that are single‐precision
                   (4 bytes in size) to double‐precision.
                   This suboption requires  the  libxlfpmt4.a  library  during
                   linking.
              dbl8
                   Promotes  floating‐point  objects that are double‐precision
                   (8 bytes in size) to extended‐precision.
                   This suboption requires  the  libxlfpmt8.a  library  during
                   linking.
              dbl
                   Combines the promotions that dbl4 and dbl8 perform.
                   This  suboption  requires the libxlfpmt4.a and libxlfpmt8.a
                   libraries during linking.
              dblpad4
                   Performs the same promotions as dbl4 and  pads  objects  of
                   other types (except CHARACTER) if they could possibly share
                   storage with promoted objects.
                   This suboption requires the  libxlfpmt4.a  and  libxlfpad.a
                   libraries during linking.
              dblpad8
                   Performs  the  same  promotions as dbl8 and pads objects of
                   other types (except CHARACTER) if they could possibly share
                   storage with promoted objects.
                   This  suboption  requires  the libxlfpmt8.a and libxlfpad.a
                   libraries during linking.
              dblpad
                   Combines the promotions done by  dbl4  and  dbl8  and  pads
                   objects  of  other  types  (except CHARACTER) if they could
                   possibly share storage with promoted objects.
                   This suboption requires the libxlfpmt4.a, libxlfpmt8.a, and
                   libxlfpad.a libraries during linking.

              Default: ‐qautodbl=none

       ‐qdpc[=e] | ‐qnodpc
              Increases  the precision of real constants, for maximum accuracy
              when assigning real constants  to  DOUBLE  PRECISION  variables.
              ‐qdpc=e also promotes constants with an e exponent.

              Default: −qnodpc

       ‐qenum=<suboption>
              Specifies  the  range for an enumerator’s value. <suboption> can
              be:

              1
                   The enumerator value must fit into 1 byte of  storage.  The
                   enumerator is of type integer(4).
              2
                   The  enumerator value must fit into 2 bytes of storage. The
                   enumerator is of type integer(4).
              4
                   The enumerator value must fit into 4 bytes of storage.  The
                   enumerator is of type integer(4).
              8
                   The  enumerator value must fit into 8 bytes of storage. The
                   enumerator is of type integer(8).

              Default: −qenum=4

       ‐qfloat=<suboptions_list>
              Specifies various floating‐point suboptions. This provides  dif‐
              ferent  strategies  for speeding up or improving the accuracy of
              floating‐point calculations. <suboptions_list> is a  colon‐sepa‐
              rated list of one or more of the following:

              complexgcc | nocomplexgcc
                   Enables  compatibility  with  GCC  passing and returning of
                   parameters of complex data type.
                   Default: nocomplexgcc
              fltint | nofltint
                   Speeds up floating‐point‐to‐integer  conversions  by  using
                   faster  inline  code  that  does  not  check for overflows.
                   ‐qfloat=nofltint checks  floating‐point‐to‐integer  conver‐
                   sions for out‐of‐range values.
                   Default:
                     · nofltint at ‐O2 optimization.
                     ·  fltint  when  ‐qnostrict or ‐O3 or higher optimization
                     level is in effect.
              fold | nofold
                   Specifies that constant floating‐point expressions  are  to
                   be evaluated at compile time rather than at run time.
                   Default: fold
              gcclongdouble | nogcclongdouble
                   Specifies  whether  the compiler should use GCC‐supplied or
                   IBM‐supplied library  functions  for  128‐bit  long  double
                   operations. gcclongdouble ensures binary compatibility with
                   GCC for mathematical calculations but nogcclongdouble  pro‐
                   duces better performance.
                   Default: nogcclongdouble
              hsflt | nohsflt
                   The  hsflt  option  speeds  up  calculations  by truncating
                   instead of rounding computed  values  to  single  precision
                   before  storing  and  on conversions from floating‐point to
                   integer. The nohsflt suboption specifies that single‐preci‐
                   sion  expressions  are  rounded after expression evaluation
                   and that floating‐point‐to‐integer conversions  are  to  be
                   checked for out‐of‐range values.
                   Default: nohsflt
              maf | nomaf
                   Makes  floating‐point calculations faster and more accurate
                   by using  floating‐point  multiply‐add  instructions  where
                   appropriate.
                   Default: maf
              nans | nonans
                   Generates  extra  instructions to detect signaling NaN when
                   converting from single‐precision to double‐precision at run
                   time. The option nonans specifies that this conversion need
                   not be detected.
                   Default: nonans
              rngchk | norngchk
                   Specifying norngchk instructs the compiler  to  skip  range
                   checking, allowing for increased performance where division
                   and sqrt operations are performed repeatedly within a loop.
                   When  rngchk  is specified, range checking is performed for
                   input arguments for software divide and inlined sqrt opera‐
                   tions.
                   When  ‐qstrict  is  active,  the  setting of this option is
                   forced to ‐qfloat=rngchk. When ‐qnostrict  is  active,  the
                   setting  of  this  option  is  ‐qfloat=norngchk  unless the
                   −qfloat=rngchk option is explicitly set by the user.
                   Default: rngchk
              rrm | norrm
                   Prevents floating‐point optimizations that are incompatible
                   with runtime rounding to plus and minus infinity modes.
                   Default: norrm
              rsqrt | norsqrt
                   Specifies whether a sequence of code that involves division
                   by the result of a square root can be replaced by calculat‐
                   ing  the  reciprocal  of  the  square root and multiplying.
                   Allowing this replacement produces code that  runs  faster.
                   ‐qfloat=rsqrt has no effect unless ‐qignerrno is also spec‐
                   ified.
                   Default:
                     · norsqrt at ‐O2 optimization.
                     · rsqrt when when ‐qnostrict or ‐O3 or  higher  optimiza‐
                     tion level is in effect.
              strictnmaf | nostrictnmaf
                   Ensures  that  the  compiler does not perform optimizations
                   that introduce multiply‐add operations that do not preserve
                   the sign of a zero value.
                   Default: nostrictnmaf

       ‐qieee=<suboption>
              Specifies  the rounding mode for the compiler to use when evalu‐
              ating constant floating‐point expressions at compile time. <sub‐
              option> can be one of the following:

              Near
                   Round to nearest representable number
              Minus
                   Round toward minus infinity
              Plus
                   Round toward plus infinity
              Zero
                   Round toward zero

              Default: −qieee=near

       ‐qintlog | ‐qnointlog
              Allows  mixing  of INTEGER and LOGICAL values in expressions and
              statements.

              Default: −qnointlog

       ‐qintsize={2|4|8)
              Sets the size of default INTEGER and LOGICAL values.

              Default: −qintsize=4

       ‐qrealsize=(4|8}
              Sets the default size in bytes of REAL, DOUBLE  PRECISION,  COM‐
              PLEX and DOUBLE COMPLEX values.

              Default: −qrealsize=4

       ‐qstrictieeemod | ‐qnostrictieeemod
              Specifies that the compiler will adhere to the Fortran 2003 IEEE
              arithmetic rules for  the  ieee_arithmetic  and  ieee_exceptions
              intrinsic modules.

              Default: −qstrictieeemod

       ‐y<rounding_mode>
              Equivalent  to  the  ‐qieee  option.  Specifies the compile‐time
              rounding mode  of  constant  floating‐point  expressions,  where
              <rounding_mode> is one of the following:

              m = round toward minus infinity
              n = round to the nearest representable number, ties to even
              p = round toward plus infinity
              z = round toward zero

              Default: −yn

Object code control options
       ‐q32, ‐q64
              Selects  either 32‐bit or 64‐bit compilation mode.  Use the ‐q32
              and ‐q64 options, along with  the  ‐qarch  and  −qtune  compiler
              options, to optimize the output of the compiler to the architec‐
              ture on which that output will be used.

              Default: −q32

       ‐qinlglue | ‐qnoinlglue
              This option inlines glue code that optimizes  external  function
              calls when compiling at ‐q64 and ‐O2 and higher.

              Default: −qnoinlglue

       ‐qpic[={small|large}] | ‐qnopic
              Generates  position‐independent  code (pic). Specify −qpic=small
              if the global  offset  table  must  be  64  Kb  or  smaller,  or
              ‐qpic=large if it can be larger than 64 Kb.

              Default: −qpic=small

       ‐qsaveopt | ‐qnosaveopt
              Saves the command‐line options used for compiling a source file,
              the version and level of each compiler component invoked  during
              compilation,  and  other information to the corresponding object
              file.
              This option must be used with the ‐c option.

              Default: −qnosaveopt

       ‐qtbtable=<suboption>
              Generates a traceback table that contains information about each
              function,  including the type of function as well as stack frame
              and register information. The traceback table is placed  in  the
              text  segment  at the end of its code.  This option applies only
              to 64‐bit compilations, and is ignored if specified for a 32‐bit
              compilation.  Suboptions include:

              none
                   No traceback table is generated.
              small
                   A  traceback  table  is generated with no name or parameter
                   information. This is the default with optimization if ‐g is
                   not specified.
              full
                   A  full  traceback  table is generated. This is the default
                   with ‐qnoopt or ‐g specified.

              Default:
                   · ‐qtbtable=full when compiling non‐optimized (without  −O)
                   or for debugging (with ‐g).
                   · ‐qtbtable=small otherwise.

       ‐qthreaded
              Ensures that all optimizations will be thread‐safe for executing
              in a multi‐threaded environment.

              Default:
                   ‐qthreaded for the xlf90_r, xlf95_r, xlf_r,  and  xlf2003_r
                   commands.

Error checking and debugging options
       ‐#     Traces the compilation and generates information on the progress
              of the compilation without invoking the preprocessor,  compiler,
              or linkage editor.

       ‐C     Checks  each  reference  to  an array element, array section, or
              character substring for correctness.

       ‐qcheck | ‐qnocheck
              The long form of the ‐C option.

              Default: −qnocheck

       ‐qflttrap[=<suboptions_list>] | ‐qnoflttrap
              Generates instructions to detect and trap runtime floating‐point
              exceptions.  <suboptions_list>  is a colon‐separated list of one
              or more of the following suboptions:

              enable
                   Enables trapping of the specified exceptions.
              imprecise
                   Only checks for  the  specified  exceptions  on  subprogram
                   entry and exit.
              inexact
                   Detects floating‐point inexact exceptions.
              invalid
                   Detects floating‐point invalid operation exceptions.
              nanq
                   Generates code to detect and trap NaNQ (Not a Number Quiet)
                   exceptions handled or generated  by  floating‐point  opera‐
                   tions.
              overflow
                   Detects floating‐point overflow.
              underflow
                   Detects floating‐point underflow.
              zerodivide
                   Detects floating‐point division by zero.

              Default: −qnoflttrap

       ‐qfullpath | ‐qnofullpath
              Records  the  full  or absolute path names of source and include
              files in object files compiled with debugging information  (when
              you use the ‐g option).

              Default: −qnofullpath

       ‐g     Generates debug information for debugging tools.
              ‐qdbg is the long form of ‐g.
              ‐g implies the ‐Q! option.

       ‐qhalt=<sev>
              Stops  the  compiler after the first phase if the severity level
              of errors detected equals or exceeds the specified level, <sev>.
              The severity levels in increasing order of severity are:

              i = informational messages
              l = language‐level messages
              w = warning messages
              e = error messages
              s = severe error messages
              u = unrecoverable error messages

              Default: −qhalt=s

       ‐qinit=f90ptr
              Makes  the  initial association status of pointers disassociated
              instead of undefined.
              This option applies to Fortran 90 and above.

              Default:
                   The default association status of pointers is undefined.

       ‐qinitauto=[<hex_value>] | ‐qnoinitauto
              Initializes each byte or word of storage for automatic variables
              to  the  specified hexadecimal value <hex_value>. This generates
              extra code and should only be used for error determination.   If
              you  specify ‐qinitauto without a <hex_value>, the compiler ini‐
              tializes the value of each byte of automatic storage to zero.

              Default: −qnoinitauto

       ‐qkeepparm | ‐qnokeepparm
              Ensures that function parameters are stored on the stack even if
              the  application is optimized. As a result, parameters remain in
              the expected memory location, providing access to the values  of
              these incoming parameters to tools such as debuggers.

              Default: −qnokeepparm

       ‐qlinedebug | ‐qnolinedebug
              Generates  only  abbreviated  line  number  and source file name
              information for the debugger.

              Default: −qnolinedebug

       ‐qobject | ‐qnoobject
              Specifies whether to produce an object file or to  stop  immedi‐
              ately after checking the syntax of the source files.

              Default: −qobject

       ‐qoptdebug | ‐qnooptdebug
              When  used with high levels of optimization, ‐qoptdebug produces
              source files containing optimized pseudocode that can be read by
              a debugger.
              An  output  file  with  a  .optdbg extension is created for each
              input file compiled with ‐qoptdebug. You can use the information
              contained  in  this  file  to  help you understand how your code
              actually behaves under optimization.

              Default: ‐qnooptdebug

       ‐qwarn64 | ‐qnowarn64
              Enables checking for possible data conversion  problems  between
              32‐bit and 64‐bit compiler modes.

              Default: −qnowarn64

       ‐qxflag=dvz
              Specifying  ‐qxflag=dvz  causes the compiler to generate code to
              detect  floating‐point  divide‐by‐zero  operations.  With   this
              option  on,  the  extra code calls the external handler function
              __xl_dzx when the divisor is zero.
              By default,  no  code  is  generated  to  detect  floating‐point
              divide‐by‐zero operations.

Listing and messages options
       ‐qattr[=full] | ‐qnoattr
              Produces  a  compiler listing that includes an attribute listing
              for all identifiers. If ‐qattr is specified,  the  listing  con‐
              tains  only  those  identifiers that are used. If ‐qattr=full is
              specified, the listing contains all names. If ‐qnoattr is speci‐
              fied, no listing is produced.

              Default: −qnoattr

       ‐qflag=<listing_severity>:<terminal_severity>
              Defines  the minimum severity level of diagnostic messages to be
              written to the listing file and to  the  user  terminal.  <list‐
              ing_severity>  is  the  minimum  level for the listing file, and
              <terminal_severity> is the minimum level for the  terminal.  The
              message severity levels are:

              i = informational messages
              l = language‐level messages
              w = warning messages
              e = error messages
              s = severe error messages
              q = no messages, even if the compiler encounters
                  unrecoverable errors

              Default: −qflag=i:i

       ‐qlist[={offset|nooffset}] | ‐qnolist
              Produces a compiler listing that includes an object listing. You
              can use the object listing to help  understand  the  performance
              characteristics  of the generated code and to diagnose execution
              problems.

              offset | nooffset
                   Changes the offset of the PDEF header  from  00000  to  the
                   offset of the start of the text area.

              Specifying   ‐qlist  without  the  suboption  is  equivalent  to
              list=nooffset.

              Default: −qnolist

       ‐qlistopt | ‐qnolistopt
              Produces a compiler listing that displays all the  options  that
              were in effect when the compiler was invoked.

              Default: −qnolistopt

       ‐qphsinfo | ‐qnophsinfo
              Reports the time taken in each compilation phase. Phase informa‐
              tion is sent to standard output. The output takes the form <num‐
              ber1>/<number2>  for  each  phase where <number1> represents the
              CPU time used by the compiler and <number2> represents the total
              of  the  compiler time and the time that the CPU spends handling
              system calls.

              Default: −qnophsinfo

       ‐qnoprint
              Prevents the compiler from creating the listing file, regardless
              of the settings of other listing options.

       ‐qreport[={smplist|hotlist}] | ‐qnoreport
              Determines whether to produce transformation reports showing how
              the program is parallelized and how loops are optimized.  Subop‐
              tions are:

              smplist | hotlist
                   smplist produces a report showing how the program is paral‐
                   lelized.
                   hotlist produces a report  showing  how  loops  are  trans‐
                   formed.

              Specifying  ‐qreport  with  no suboptions is equivalent to ‐qre‐
              port=hotlist.

              Default: −qnoreport

       ‐qsource | ‐qnosource
              Produces a compiler listing that includes source code.

              Default: −qnosource

       ‐qsuppress[={<msg_nums_list>|cmpmsg}] | ‐qnosuppress
              Determines which messages to suppress from  the  output  stream.
              The suboptions are:

              <msg_nums_list>
                   A colon‐separated list of 7‐digit compiler message numbers.
              cmpmsg
                   Suppresses the informational messages that report  compila‐
                   tion progress and a successful completion.

              Default: −qnosuppress

       ‐v     Instructs  the compiler to report information on the progress of
              the compilation, and names the programs being invoked within the
              compiler and the options being specified to each program. Infor‐
              mation is displayed in a comma‐separated list.

       ‐V     Instructs the compiler to report information on the progress  of
              the compilation, and names the programs being invoked within the
              compiler and the options being specified to each program. Infor‐
              mation is displayed in a space‐separated list.

       ‐qversion[=verbose] | ‐qnoversion
              Displays  the  official  compiler  product name and the compiler
              version found on the system.

              verbose
                   Displays the official product name and a list  of  compiler
                   and  runtime  filesets along with their corresponding level
                   in  both  version,  release,  modification  and  fix  level
                   (V.R.M.F)  and YYYYMM format, where YYYY is the year and MM
                   is the month that the PTF is released.
                   If the fileset installed is at the BASE level, the  version
                   will be reported as "BASE" instead of YYYYMM.

              Default: ‐qnoversion

       ‐w     Suppresses informational, language‐level and warning messages.
              Specifying this option is equivalent to specifying ‐qflag=e:e.

       ‐qxref[=full] | ‐qnoxref
              Specifies  whether to produce a compiler listing that includes a
              cross‐reference listing of all identifiers.
              Specifying ‐qxref will report only identifiers  that  are  used,
              ‐qxref=full reports all identifiers in the program, and ‐qnoxref
              does not report any identifiers in the  program.  The  ‐qnoprint
              option overrides this option.

              Default: −qnoxref

Optimization and tuning options
       ‐qalias=<suboptions_list>
              Indicates  whether  a  program  contains  certain  categories of
              aliasing to determine whether  certain  optimizations  are  per‐
              formed.  <suboptions_list> is a colon‐separated list of the fol‐
              lowing suboptions:

              aryovrlp | noaryovrlp
                   When enabled the  program  contains  array  assignments  of
                   overlapping or storage‐associated arrays.
                   Default: aryovrlp
              intptr | nointptr
                   When enabled, the program contains integer pointer declara‐
                   tions.
                   Default: nointptr
              pteovrlp | nopteovrlp
                   When selected, the program contains pointee variables  that
                   refer  to  non‐pointee  variables, or two pointee variables
                   that refer to the same storage location.
                   Default: pteovrlp
              std | nostd
                   When selected, the program contains only  standard‐conform‐
                   ing aliasing.
                   Default: std

              Default:
                   ·  ‐qalias=aryovrlp:nointptr:pteovrlp:std  for  the  xlf90,
                   xlf90_r, f90, xlf95, xlf95_r, f95, xlf2003,  xlf2003_r  and
                   f2003 invocation commands.
                   ·  ‐qalias=aryovrlp:intptr:pteovrlp:std for the xlf, xlf_r,
                   f77, and fort77 invocation commands.

       ‐qarch=<suboption>
              Specifies the general processor architecture for which the  code
              (instructions)  should  be  generated.   In  general, the ‐qarch
              option allows you to target a specific architecture for the com‐
              pilation.   For  any given ‐qarch setting, the compiler defaults
              to a specific, matching ‐qtune setting, which can provide  addi‐
              tional performance improvements.  The suboptions are:

              auto
                   Automatically detects the specific architecture of the com‐
                   piling machine. It assumes that the  execution  environment
                   will be the same as the compilation environment.
              pwr3
                   Produces  an  object that contains instructions that run on
                   the POWER3 hardware platforms.
              pwr4
                   Produces an object that contains instructions that  run  on
                   the POWER4 hardware platforms.
              pwr5
                   Produces  an  object that contains instructions that run on
                   the POWER5 hardware platforms.
              pwr5x
                   Produces an object that contains instructions that  run  on
                   the POWER5+ hardware platforms.
              pwr6
                   Produces  object code containing instructions that will run
                   on the POWER6 hardware platforms running in  POWER6  archi‐
                   tected mode.
              pwr6e
                   Produces  object code containing instructions that will run
                   on the POWER6 hardware  platforms  running  in  POWER6  raw
                   mode.
              ppc
                   Produces  an  object that contains instructions that run on
                   any of the 32‐bit PowerPC hardware  platforms.  Using  ‐q64
                   with ppc upgrades the architecture to ppc64.
              ppc64
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware  platform.  When  compiled  in  32‐bit  mode,  the
                   resulting object code may include instructions that are not
                   recognized or behave differently when run on 32‐bit PowerPC
                   platforms.
              ppcgr
                   In  32‐bit  mode,  produces object code containing optional
                   graphics instructions for PowerPC hardware platforms.
                   In 64‐bit mode, produces object  code  containing  optional
                   graphics instructions that will run on 64‐bit PowerPC plat‐
                   forms, but not on 32‐bit‐only platforms.  Using  ‐q64  with
                   ppcgr upgrades the architecture to ppc64gr.
              ppc64gr
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware  platform  that  supports  the  optional  graphics
                   instructions.
              ppc64grsq
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware platform that supports the optional  graphics  and
                   square root instructions.
              ppc64v
                   Produces  object  code  that will run on any 64‐bit PowerPC
                   hardware  platform  that  supports  the   optional   vector
                   instructions, such as a PowerPC 970.
              ppc970
                   Generates  instructions specific to PowerPC 970 processors.
              rs64b
                   Produces an object that contains instructions that  run  on
                   an RS64II hardware platform.
              rs64c
                   Produces  an  object that contains instructions that run on
                   an RS64III hardware platform.

              Default: −qarch=ppc64grsq

       ‐qassert={deps|nodeps|itercnt=<n>}
              Provides information about the program to help  fine‐tune  opti‐
              mizations. Suboptions include:

              deps
                   Loops can contain loop‐carried dependencies.
              nodeps
                   No loops contain any loop‐carried dependencies.
              itercnt=<n>
                   The iteration count of a typical loop is <n>.

              Default: −qassert=deps

       ‐qcache=<suboptions_list>
              Describes  the  cache configuration for a specific target execu‐
              tion machine, where <suboptions_list> is a colon‐separated  list
              of one or more of the following suboptions:

              assoc=<number>
                   Specifies  the  set associativity of the cache, where <num‐
                   ber> is one of the following:
                        0         Direct‐mapped cache
                        1         Fully associative cache
                        (n > 1)   n‐way set associative cache
              auto
                   Automatically detects the specific cache  configuration  of
                   the  compiling machine. It assumes that the execution envi‐
                   ronment will be the same as the compilation environment.
              cost=<cycles>
                   Specifies the performance penalty, in CPU cycles, resulting
                   from a cache miss.
              level=<level>
                   Specifies  which level of cache is affected, where level is
                   one of the following::
                        1     Basic cache
                        2     Level‐2 cache
                        3     Table Lookaside Buffer (TLB)
                   If a machine has more than one level of cache, use a  sepa‐
                   rate ‐qcache option.
              line=<bytes>
                   Specifies the line size of the cache.
              size=<Kbytes>
                   Specifies the total size of the cache.
              type=<cache_type>
                   The  settings  apply  to the specified type of cache, where
                   <cache_type> is one of the following:
                        C or c = Combined data and instruction cache
                        D or d = Data cache
                        I or i = Instruction cache

              Default:
                   The ‐qtune setting determines the optimal  default  ‐qcache
                   settings  for most typical compilations. ‐O4, ‐O5, or ‐qipa
                   must be specified with the ‐qcache option.

       ‐qcompact | ‐qnocompact
              Reduces code size where possible, at the  expense  of  execution
              speed.  Code  size  is  reduced by inhibiting optimizations that
              replicate or expand code inline. This option takes  effect  only
              if ‐O2 or higher is also used.

              Default: −qnocompact

       ‐qdirectstorage | ‐qnodirectstorage
              Informs  the compiler that write‐through‐enabled or cache‐inhib‐
              ited storage may be referenced.

              Default: ‐qnodirectstorage

       ‐qenablevmx | ‐qnoenablevmx
              Enables the generation of  vector  instructions  for  processors
              that  support  them. These instructions can offer higher perfor‐
              mance when used with algorithmic‐intensive tasks such as  multi‐
              media applications.
              For  ‐qenablevmx  to  have effect, the architecture specified by
              the ‐qarch option must support vector instructions.

              Default: −qenablevmx

       ‐qessl | ‐qnoessl
              Specifies that, if either ‐lessl or ‐lesslsmp  are  also  speci‐
              fied,  then Engineering and Scientific Subroutine Library (ESSL)
              routines should be used in place of some  Fortran  90  intrinsic
              procedures when there is a safe opportunity to do so.

              Default: −qnoessl

       ‐qfdpr | ‐qnofdpr
              Collects  information  about programs for use with the IBM Feed‐
              back Directed Program  Restructuring  (FDPR)  performance‐tuning
              utility.

              Default: −qnofdpr

       ‐qhot[=<suboption>] | ‐qnohot
              Specifies  whether  or not to perform high‐order transformations
              during optimization. The suboptions are:

              arraypad[=<number>] | noarraypad
                   When <number> is specified, the  compiler  will  pad  every
                   array  in the code. The pad amount must be a positive inte‐
                   ger value. Otherwise, the  compiler  will  pad  any  arrays
                   where it infers that there may be a benefit.
              level={0|1}
                   Specifies the level of high‐order transformation to perform
                   during compilation.
                   0
                        The compiler  performs  a  subset  of  the  high‐order
                        transformations. Some of these include early distribu‐
                        tion, loop interchange, and loop tiling, as  examples.
                        Optimization level ‐O3 implies ‐qhot=level=0.
                   1
                        At  level=1,  full  high‐order  transformation is per‐
                        formed. ‐qhot=level=1 is equivalent to ‐qhot  and  the
                        compiler   options   that   imply   ‐qhot  also  imply
                        ‐qhot=level=1,  unless  ‐qhot=level=0  is   explicitly
                        specified.
              simd | nosimd
                   Converts certain operations in a loop that apply to succes‐
                   sive elements of an array into a vector instruction.   This
                   call  calculates  several  results  at  one  time, which is
                   faster than calculating each result  sequentially.  If  you
                   specify  ‐qhot=nosimd,  the compiler performs optimizations
                   on loops and arrays, but avoids replacing certain code with
                   vector  instructions.  To enable ‐qhot=simd, you must spec‐
                   ify an architecture that supports vector instructions.
              vector | novector
                   When specified with ‐qnostrict and ‐qignerrno, or an  opti‐
                   mization level of ‐O3 or higher (otherwise ‐qhot=vector has
                   no effect), the compiler converts certain operations  in  a
                   loop  that  apply to successive elements of an array into a
                   call to a routine in the Mathematical Acceleration  Subsys‐
                   tem (MASS) library, part of the libxlopt.a library.
                   If  you specify ‐qhot=novector, the compiler performs opti‐
                   mizations on loops and arrays, but avoids replacing certain
                   code with calls to vector library routines.

              Specifying   ‐qhot   without  suboptions  implies  ‐qhot=nosimd,
              −qhot=noarraypad,  ‐qhot=vector  and  ‐qhot=level=1.  The  ‐qhot
              option is also implied by ‐qsmp, ‐O4 and ‐O5.

              Default: −qnohot

       ‐qipa[=<suboptions_list>] | ‐qnoipa
              Turns  on or customizes a class of optimizations known as inter‐
              procedural analysis (IPA). <suboptions_list>  is  a  colon‐sepa‐
              rated list of the following suboptions:

              clonearch=<arch_name> | noclonearch
                   Specifies  the architectures for which multiple versions of
                   the same instruction set are produced, where <arch_name> is
                   a comma‐separated list of architecture names. Use this sub‐
                   option if you require optimal performance on multiple  dif‐
                   fering  machines running the same copy of your application.
              cloneproc=<function_name> | nocloneproc=<function_name>
                   Specifies the name of the functions to clone for the archi‐
                   tectures specified by the clonearch suboption, where <func‐
                   tion_name> is a comma‐separated list of function names.
              exits=<procedures>
                   Specifies names of functions which represent program exits.
                   <procedures> is a comma‐separated list of procedures.
              inline[=<suboption>]
                   Specifying  ’inline’  with  no  suboption  asserts that all
                   appropriate procedures will be inlined. <suboption> can  be
                   one of the following:
                   auto|noauto
                        Enables or disables automatic function inlining by the
                        high‐level optimizer.  When  ‐qipa=inline=auto  is  in
                        effect,  the compiler considers all functions that are
                        under the maximum size limit (see below) for inlining.
                        When −qipa=inline=noauto is in effect, only procedures
                        listed in the <procedures>  suboption  are  considered
                        for inlining.
                   <procedures>
                        Specifies  a  comma‐separated  list  of  procedures to
                        attempt to inline.
                   limit=<num>
                        Specifies a limit on the size of  a  calling  function
                        after   inlining.   This   only   takes   effect  when
                        inline=auto is on. If you do not specify a  value  for
                        <num>, <num> is 8192 by default.
                   threshold=<num>
                        Specifies  the  upper  size  limit  on  procedures  to
                        inline. This only takes effect when inline=auto is on.
                        If you do not specify a value for <num>, <num> is 1024
                        by default.
                   Default: auto
              noinline[=<procedures>]
                   Specifies a comma‐separated list of  procedures  which  are
                   not  to  be  inlined.  Specifying  noinline without <proce‐
                   dures>, asserts that no procedures are to be inlined.
              isolated=<procedures>
                   Specifies a comma‐separated list of procedures that are not
                   compiled with ‐qipa and do not directly refer to any global
                   variable.
              level=<level>
                   Determines the amount of IPA analysis and optimization per‐
                   formed, where <level> can be equal to:
                   0
                        Performs  only  minimal  interprocedural  analysis and
                        optimization.
                   1
                        Turns on inlining, limited alias analysis, and limited
                        call‐site tailoring.
                   2
                        Full interprocedural data flow and alias analysis.
                   Default: 1
              list[={<file_name>|short|long}]
                   Specifies  an  output  listing  file  name  during the link
                   phase. The default name is "a.lst".  Specifying  ’long’  or
                   the  listing  file to determine which listing sections will
                   be included.
                   Default: short
              lowfreq=<procedures>
                   Specifies a comma‐separated list  of  procedures  that  are
                   likely  to  be  called  infrequently during the course of a
                   typical program run.
              missing={unknown|safe|isolated|pure}
                   Specifies the default assumption for  procedures  not  com‐
                   piled with ‐qipa.
                   unknown
                        Greatly  restricts the amount of interprocedural opti‐
                        mization for calls to unknown functions.
                   safe
                        Functions which do not indirectly call a visible  (not
                        missing)  function either through direct call or func‐
                        tion pointer.
                   isolated
                        Functions which do not directly reference global vari‐
                        ables accessible to visible functions.
                   pure
                        Functions which are safe and isolated and which do not
                        indirectly alter storage accessible to functions.
                   Default: missing=unknown
              object | noobject
                   Specifies whether to include standard object  code  in  the
                   object   files.  Specifying  ’noobject’  can  substantially
                   reduce overall compile time by not generating  object  code
                   during the first IPA phase.
              partition={small|medium|large}
                   Specifies  the  size  of program sections that are analyzed
                   together. Larger partitions may produce better analysis but
                   require more storage.
                   Default: partition=medium
                   pure=<procedures>
                        Specifies  a  comma‐separated  list  of procedures not
                        compiled with ‐qipa and that are  "isolated",  "safe",
                        and do not modify any data objects that are visible to
                        the caller.
                   safe=<procedures>
                        Specifies a comma‐separated  list  of  procedures  not
                        compiled  with  ‐qipa  and  that do not call any other
                        part of the program.
                   stdexits | nostdexits
                        Specifies that compiler‐defined exit routines  can  be
                        optimized  as  with  the "exits" suboption. The proce‐
                        dures are abort, exit, _exit, and _assert.
                        Default: nostdexits
                   threads[=<suboption>] | nothreads
                        Runs portions of the IPA optimization  process  during
                        pass  2  in  parallel  threads, which can speed up the
                        linking process on  multi‐processor  systems.  <subop‐
                        tion> can be one of the following:
                        auto | noauto
                             When  auto  is  in effect, the compiler selects a
                             number of threads heuristically based on  machine
                             load.  When  noauto  is  in  effect, the compiler
                             spawns one thread per machine processor.
                        <number>
                             Instructs the compiler to use a  specific  number
                             of  threads. <number> can be any integer value in
                             the range of 1 to  32767.  However,  <number>  is
                             effectively  limited  to the number of processors
                             available on your system.
                        Specifying  threads   with   no   suboptions   implies
                        threads=auto.
                        Default: ‐qipa=threads
                   unknown=<procedures>
                        Specifies  a  comma‐separated  list of procedures that
                        are not compiled with ‐qipa and that may update global
                        variables  and dummy arguments and call other parts of
                        the program compiled with ‐qipa.
                   <file_name>
                        Specifies the name of a file that  contains  suboption
                        information in a special format.

                   Regular expressions are supported when specifying procedure
                   names for these suboptions:
                   cloneproc, nocloneproc, exits, inline, noinline,  isolated,
                   lowfreq, pure, safe, unknown.

                   Default:
                        · ‐qnoipa
                        ·   ‐qipa=inline=auto:level=1:missing=unknown:  parti‐
                        tion=medium:threads=auto when ‐O4 is in effect.
                        ·  ‐qipa=inline=auto:level=2:missing=unknown:   parti‐
                        tion=medium:threads=auto when ‐O5 is in effect.
                        ·   ‐qipa=inline=auto:level=0:missing=unknown:  parti‐
                        tion=medium:threads=auto when ‐qpdf1 or ‐qpdf2  is  in
                        effect.

       ‐qlibansi | ‐qnolibansi
              Assumes  that  all  functions with the name of an ANSI C defined
              library function are, in fact, the library functions.

              Default: −qnolibansi

       ‐qlibposix | ‐qnolibposix
              Assumes that all functions with the name of an IEEE  1003.1‐2001
              (POSIX)  defined library function are, in fact, the system func‐
              tions.

              Default: −qnolibposix

       ‐qmaxmem=<size>
              Limits the amount of memory  used  by  certain  memory‐intensive
              optimizations  to <size> kilobytes. When <size> is ‐1, the opti‐
              mizer will use as much memory as needed.

              Default:
                   · ‐qmaxmem=8192 when ‐O2 level optimization is set.
                   · ‐qmaxmem=‐1 when ‐O3 level  or  greater  optimization  is
                   set.

       ‐qminimaltoc | ‐qnominimaltoc
              Avoids  Table  of  Contents (TOC) overflow conditions by placing
              TOC entries into a separate data section for each  object  file.
              By  default,  the  compiler will allocate at least one TOC entry
              for each unique non‐automatic variable reference  in  your  pro‐
              gram.

              Default: −qnominimaltoc

       ‐O[<level>]
              Optimizes code at a choice of levels during compilation. This is
              equivalent to −qoptimize[=<level>]. <level> can be:

              0
                   Performs only quick local optimizations  such  as  constant
                   folding and elimination of local common subexpressions.
              2
                   Performs optimizations that the compiler developers consid‐
                   ered the best combination for compilation speed and runtime
                   performance.  The  optimizations  may  change  from product
                   release to release.
              3
                   Performs some memory and compile‐time  intensive  optimiza‐
                   tions  in addition to those executed with ‐O2. The −O3 spe‐
                   cific optimizations have the potential to alter the  seman‐
                   tics  of a program. The compiler guards against these opti‐
                   mizations at ‐O2 and the option ‐qstrict is provided at ‐O3
                   to turn off these aggressive optimizations.
                   Specifying ‐O3 implies ‐qhot=level=0.
              4
                   This option is the same as ‐O3, but also:
                     ·  sets the ‐qarch and ‐qtune options to the architecture
                     of the compiling machine.
                     · sets the ‐qcache option most appropriate to the charac‐
                     teristics of the compiling machine.
              5
                   Equivalent to ‐O4 ‐qipa=level=2.

              Specifying ‐O with no <level> is equivalent to specifying −O2.

              Default: −O0

       ‐qoptimize[=<level>] | ‐qnooptimize
              The long form of the ‐O option. ‐qoptimize=<level> is equivalent
              to ‐O<level>. See the ‐O option.

              Default: −qnooptimize

       ‐p[g]  Sets up the object files produced by the compiler for profiling.
              ‐pg is like ‐p, but it produces more extensive statistics.

       ‐qpdf1[=pdfname=<file_path] | ‐qnopdf1
              Tunes  optimizations  through  profile‐directed  feedback (PDF),
              where results from sample program execution are used to  improve
              optimization  near  conditional  branches and in frequently exe‐
              cuted code sections.
              Used with a minimum optimization level of ‐O2,  ‐qpdf1  produces
              an  object  that  is  instrumented  to collect runtime execution
              information. This is phase 1 of  the  profile‐directed  feedback
              optimization process.

              pdfname=<file_path>
                   Specifies  the  location  and name of the profile data file
                   containing the PDF profiling information.
                   Default:
                     If you do not specify <file_path>, the default file  name
                     is  ._pdf  and  the  file is saved in the current working
                     directory, or in the directory named by the PDFDIR  envi‐
                     ronment variable, if it is set.

              Default: −qnopdf1

       ‐qpdf2[=pdfname=<file_path>] | ‐qnopdf2
              Tunes  optimizations  through  profile‐directed  feedback (PDF),
              where results from sample program execution are used to  improve
              optimization  near  conditional  branches and in frequently exe‐
              cuted code sections.
              Used with a minimum optimization  level  of  ‐O2,  ‐qpdf2  tunes
              application  performance  using  the data generated by running a
              program compiled with ‐qpdf1. This is phase 2  of  the  profile‐
              directed feedback optimization process.

              pdfname=<file_path>
                   Specifies  the  location  and name of the profile data file
                   containing the PDF profiling information.
                   Default:
                     If you do not specify <file_path>, the default file  name
                     is  ._pdf  and  the  file is saved in the current working
                     directory, or in the directory named by the PDFDIR  envi‐
                     ronment variable, if it is set.

              Default: −qnopdf2

       ‐qprefetch | ‐qnoprefetch
              Enables  generation of prefetching instructions such as dcbt and
              dcbz in compiled code.

              Default: −qprefetch

       ‐Q[<suboption>]
              Specifies whether  Fortran  90  or  Fortran  95  procedures  are
              inlined and/or the names of particular procedures that should or
              should not be inlined.

              This option can take the form:

              ‐Q
                   Attempts to inline all appropriate functions with  20  exe‐
                   cutable  source statements or fewer, subject to the setting
                   of any of the suboptions to the ‐Q option. If ‐Q is  speci‐
                   fied last, all functions are inlined.
              ‐Q!
                   Does not inline any functions. If ‐Q! is specified last, no
                   functions are inlined.
              ‐Q‐<names>
                   Does not inline functions listed in <names>, where  <names>
                   is  a colon‐separated list. All other appropriate functions
                   are inlined. The option implies ‐Q.
              ‐Q+<names>
                   Attempts to inline the functions listed in  <names>,  where
                   <names>  is  a  colon‐separated list. All other appropriate
                   functions are inlined.

              Default: −Q!

       ‐qshowpdf | ‐qnoshowpdf
              Used with ‐qpdf1 and a minimum optimization level of ‐O2 to  add
              additional call and block count profiling information to an exe‐
              cutable.

              Default: −qnoshowpdf

       ‐qsmallstack[=<suboption>] | ‐qnosmallstack
              Specifies that the compiler will minimize stack usage where pos‐
              sible. This option can take the form:

              ‐qsmallstack
                   Enables only general small stack transformations.
              ‐qsmallstack=dynlenonheap
                   Asserts  that  automatic  variables  which are dynamically‐
                   sized are allocated from the heap and enables general small
                   stack transformations.
              ‐qsmallstack=nodynlenonheap
                   Disables dynamic‐length variable allocation.
              ‐qnosmallstack
                   Disables only the general small stack transformations.

              Default: ‐qnosmallstack

       ‐qsmp[=<suboptions_list>] | ‐qnosmp
              Enables  parallelization of program code. <suboptions_list> is a
              colon‐separated list of one or more of the following suboptions:

              auto | noauto
                   Enables  automatic  parallelization  and  optimization.  If
                   noauto is specified, automatic parallelization  of  program
                   code is disabled; only program code explicitly parallelized
                   with OpenMP directives is optimized.
                   Default: auto
              nested_par | nonested_par
                   If nested_par is specified,  prescriptive  nested  parallel
                   constructs are parallelized by the compiler.
                   Default: nonested_par
              omp | noomp
                   Enables  strict OpenMP compliance. Only OpenMP paralleliza‐
                   tion pragmas are recognized.
                   Default: noomp
              opt | noopt
                   Enables automatic parallelization but disables optimization
                   of  parallelized program code. If noopt is specified, opti‐
                   mization of parallelized program code is disabled.
                   Default: opt
              rec_locks | norec_locks
                   Specifies whether to use recursive locks.
                   Default: norec_locks
              schedule=<type>
                   Specifies what kinds of scheduling algorithms and  chunking
                   are  used  for loops to which no other scheduling algorithm
                   has been explicitly assigned in the source code. <type> can
                   be:
                     · affinity[=<num>]
                     · dynamic[=<num>]
                     · guided[=<num>]
                     · runtime
                     · static[=<num>],
                   where <num> is the number of loop iterations.
                   Default: schedule=runtime
              stackcheck | nostackcheck
                   Causes  the  compiler  to check for stack overflow by slave
                   threads at run time, and issue a warning if  the  remaining
                   stack  size  is  less than the number of bytes specified by
                   the stackcheck option of the  XLSMPOPTS  environment  vari‐
                   able.  This  suboption  is intended for debugging purposes,
                   and only takes effect  when  XLSMPOPTS=stackcheck  is  also
                   set.
                   Default: nostackcheck
              threshold[=<num>]
                   When  ‐qsmp=auto is in effect, controls the amount of auto‐
                   matic loop parallelization that occurs. The value of  <num>
                   represents the lower limit allowed for parallelization of a
                   loop, based on the level of "work" present in a loop.
                   Default:
                     <num> must be a positive integer of 0 or greater. If  you
                     specify  threshold  with no suboption, the program uses a
                     default value of 100.

              Specifying ‐qsmp without suboptions is equivalent to
              ‐qsmp=auto:noomp:opt:norec_locks:nonested_par:
              schedule=runtime:nostackcheck:threshold=100

              Default: −qnosmp

       ‐qstacktemp=<num>
              Determines where to allocate applicable compiler temporaries  at
              run time. The allocation depends on the value of <num>. The val‐
              ues are:

              0
                   Indicates that the compiler will decide whether to allocate
                   the  applicable  compiler  temporaries  on  the heap or the
                   stack.
              ‐1
                   Indicates that applicable compiler temporaries  are  to  be
                   always  allocated on the stack. This is the best‐performing
                   setting but uses the most amount of stack storage.
              (1 or greater)
                   Indicates that applicable compiler  temporaries  less  than
                   this  value  (bytes)  should  be allocated on the stack and
                   those greater than or equal to this value should  be  allo‐
                   cated on the heap.

              Default: −qstacktemp=0

       ‐qstrict | ‐qnostrict
              Turns  off  aggressive optimizations which have the potential to
              alter   the   semantics   of   your   program.   ‐qstrict   sets
              ‐qfloat=nofltint:norsqrt.  ‐qnostrict  sets  −qfloat=rsqrt. This
              option is only valid with ‐O2 or higher optimization levels.

              Default:
                   · ‐qnostrict at ‐O3 or higher.
                   · ‐qstrict otherwise.

       ‐qstrict_induction | ‐qnostrict_induction
              Turns off loop induction variable optimizations  that  have  the
              potential to alter the semantics of your program.

              Default:
                   · ‐qnostrict_induction at ‐O2 or higher.
                   · ‐qstrict_induction otherwise.

       ‐qtune=<suboption>
              Specifies  the architecture system for which the executable pro‐
              gram is optimized.
              <suboption> must be one of the following:

              auto
                   Generates object code optimized for the  hardware  platform
                   on which the program is compiled.
              balanced
                   Optimizations  are  tuned across a selected range of recent
                   hardware.
              ppc970
                   Generates instructions specific  to  PowerPC  970  hardware
                   platforms.
              pwr3
                   Generates  object  code  optimized  for the POWER3 hardware
                   platforms.
              pwr4
                   Generates object code optimized  for  the  POWER4  hardware
                   platforms.
              pwr5
                   Generates  object  code  optimized  for the POWER5 hardware
                   platforms.
              pwr6
                   Generates object code optimized  for  the  POWER6  hardware
                   platforms.
              rs64b
                   Generates object code optimized for the RS64II processor.
              rs64c
                   Generates  object code optimized for the RS64III processor.

              Default: −qtune=balanced

       ‐qunroll[={auto|yes}] | ‐qnounroll
              Unrolls inner loops in the program. This can help  improve  pro‐
              gram performance.

              auto
                   Instructs the compiler to perform basic loop unrolling.
              yes
                   Instructs the compiler to search for more opportunities for
                   loop unrolling than that performed with auto.  In  general,
                   this  suboption  is more likely to increase compile time or
                   program size than auto processing, but it may also  improve
                   your application’s performance.

              Default:
                   −qunroll=auto  if  ‐qunroll is not specified on the command
                   line.

       ‐qunwind | ‐qnounwind
              Informs the compiler that the stack can be unwound while a  rou‐
              tine  in  the  compilation  is active. Specifying ‐qnounwind can
              improve the optimization  of  non‐volatile  register  saves  and
              restores.

              Default: −qunwind

       ‐qzerosize | ‐qnozerosize
              Improves performance of some programs by preventing checking for
              zero‐sized character strings and arrays.

              Default:
                   · ‐qzerosize for the xlf90, xlf90_r, f90,  xlf95,  xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.
                   ·  ‐qnozerosize  for the xlf, xlf_r, f77 and fort77 invoca‐
                   tion commands.

Linking options
       ‐qbigdata | ‐qnobigdata
              Allows initialized data to be larger than 16MB in 32‐bit mode.

              Default: −qnobigdata

       ‐L<dir>
              Searches the path directory for library files specified  by  the
              ‐l<key> option.

              Default:
                   The default is to search only the standard directories.

       ‐l<key>
              Searches  the  file  lib<key>.so and then lib<key>.a for dynamic
              linking, or only lib<key>.a for static linking.

              Default:
                   The default is to search only some of the compiler  runtime
                   libraries.

Portability and migration options
       ‐qalign=<suboption>
              Specifies the alignment of data objects in storage to avoid per‐
              formance problems with misaligned data. Suboptions include:

              4k | no4k
                   Specifies whether to align large data objects  on  page  (4
                   KB)  boundaries, for improved performance with data‐striped
                   I/O.
              bindc=<suboption>
                   Specifies that the alignment and padding for an XL  Fortran
                   derived  type with the BIND(C) attribute is compatible with
                   a C struct type that is compiled with the corresponding  XL
                   C alignment option. The compatible alignment options are:
                     · ‐qalign=bindc=bit_packed
                     (The corresponding XL C option is ‐qalign=bit_packed.)
                     · ‐qalign=bindc=linuxppc
                     (The corresponding XL C option is ‐qalign=linuxppc.)
              struct=natural
                   Objects of a derived type declared using a STRUCTURE decla‐
                   ration are stored such that each component of each  element
                   is stored on its natural alignment boundary, unless storage
                   association requires otherwise.
              struct=packed
                   Objects of a derived type declared using a STRUCTURE decla‐
                   ration  are  stored with no space between components, other
                   than any padding represented by %FILL components.
              struct=port
                   Storage padding is the same  as  described  above  for  the
                   struct=natural suboption, except that the alignment of com‐
                   ponents of type complex is the same  as  the  alignment  of
                   components  of  type real of the same kind. The padding for
                   an object that  is  immediately  followed  by  a  union  is
                   inserted  at  the  beginning of the first map component for
                   each map in that union.

              Default: −qalign=no4k:struct=natural:bindc=linuxppc

       ‐qctyplss[={arg|noarg}] | ‐qnoctyplss
              Specifies whether character  constant  expressions  are  allowed
              wherever typeless constants may be used.

              arg
                   This  suboption provides the same behavior as the ‐qctyplss
                   option with no suboptions, with the  exception  that  if  a
                   Hollerith  constant  is  used  as an actual argument, it is
                   passed to the procedure as if it  were  an  integer  actual
                   argument.
              noarg
                   This  suboption provides the same behavior as the ‐qctyplss
                   option with no suboptions.

              Default: −qnoctyplss

       ‐qddim | ‐qnoddim
              Specifies that the bounds of  pointee  arrays  are  re‐evaluated
              each  time  the  arrays are referenced and removes some restric‐
              tions on the bounds expressions for pointee arrays.

              Default: −qnoddim

       ‐qdescriptor[={v1|v2}]
              Specifies which descriptor format the compiler will use for non‐
              object‐oriented compiler entities. The possible choices are:

              v1
                   All  object  code will use the version 1 descriptor format,
                   where possible, for backwards compatibility with V10.1  and
                   older XL Fortran object code.
              v2
                   All  object  code  will use the version 2 descriptor format
                   for all relevant code constructs.

              Default: ‐qdescriptor=v1

       ‐qescape | ‐qnoescape
              Specifies whether the backslash is treated as an escape  charac‐
              ter  in  character strings, Hollerith constants, H edit descrip‐
              tors, and character string edit descriptors.

              Default: −qescape

       ‐qextern=<procedures>
              Allows user‐written procedures to be called instead of  XL  For‐
              tran  intrinsics.  <procedures>  is a list of one or more colon‐
              separated procedure names. The procedure names are treated as if
              they  appear  in  an EXTERNAL statement in each compilation unit
              being compiled.

       ‐qextname[=<names>] | ‐qnoextname
              Adds a trailing underscore to the names of the  global  entities
              (external names) specified by <names>, a colon‐separated list of
              one or more names of global entities. If no names are specified,
              ‐qextname  adds  an  underscore to the names of all global enti‐
              ties, except for main program names.

              Default: −qnoextname

       ‐qlog4 | ‐qnolog4
              Specifies whether the result of a logical operation with logical
              operands is a LOGICAL(4) or is a LOGICAL with the maximum length
              of the operands.

              Default: −qnolog4

       ‐qmodule=mangle81
              Provides compatibility for module files that are  compiled  with
              Version  11.1 compiler to be linked to an existing set of object
              files compiled with the Version 8.1 compiler. The naming conven‐
              tion is not compatible with that used by version 8.1 of the com‐
              piler.

       ‐qport=<suboption> | ‐qnoport
              Increases flexibility when porting programs to XL Fortran,  pro‐
              viding a number of options to accommodate other Fortran language
              extensions. Suboptions include:

              clogicals | noclogicals
                   If you specify this option, the compiler  treats  all  non‐
                   zero integers that are used in logical expressions as TRUE.
                   You must specify  ‐qintlog  for  ‐qport=clogicals  to  take
                   effect.
                   Default: noclogicals
              hexint | nohexint
                   If  you  specify this option, typeless constant hexadecimal
                   strings are converted to integers  when  passed  as  actual
                   arguments  to the int intrinsic function. Typeless constant
                   hexadecimal strings not passed as actual arguments  to  INT
                   remain unaffected.
                   Default: nohexint
              mod |nomod
                   Specifying  this option relaxes existing constraints on the
                   MOD intrinsic function, allowing two arguments of the  same
                   data  type  parameter  to be of different kind type parame‐
                   ters. The result will be of the same type as the  argument,
                   but with the larger kind type parameter value.
                   Default: nomod
              nullarg | nonullarg
                   For an external or internal procedure reference, specifying
                   this option causes the compiler to treat an empty argument,
                   which  is  delimited by a left parenthesis and a comma, two
                   commas, or a comma and a right parenthesis, as a null argu‐
                   ment.  This suboption has no effect if the argument list is
                   empty.
                   Default: nonullarg
              sce | nosce
                   By default, the compiler performs short circuit  evaluation
                   in  selected  logical  expressions  using XL Fortran rules.
                   Specifying sce allows the compiler to  use  non‐XL  Fortran
                   rules.  The  compiler will perform short circuit evaluation
                   if the current rules allow it.
                   Default: nosce
              typestmt | notypestmt
                   The TYPE statement, which behaves in a  manner  similar  to
                   the  PRINT  statement, is supported whenever this option is
                   specified.
                   Default: notypestmt
              typlssarg | notyplssarg
                   Converts all typeless constants to default integers if  the
                   constants  are  actual  arguments to an intrinsic procedure
                   whose associated dummy arguments are of integer type. Dummy
                   arguments associated with typeless actual arguments of non‐
                   integer type remain unaffected by this option.
                   Default: notyplssarg

              Default: −qnoport

       ‐qswapomp | ‐qnoswapomp
              Specifies that the compiler  should  reorganize  and  substitute
              OpenMP routines in XL Fortran programs.

              Default: −qswapomp

       ‐qxflag=oldtab
              For  fixed source form programs, interprets a tab incolumns 1 to
              5 as a single character.

Compiler customization options
       ‐qalias_size=<bytes>
              Specifies the initial size (in bytes)  of  the  aliasing  table.
              This option has effect only when optimization is enabled.

       ‐B[<prefix>]
              Determines substitute path names for programs used during compi‐
              lation, such as the compiler,  assembler,  linkage  editor,  and
              preprocessor,  where <prefix> can be any program name recognized
              by the ‐t compiler option. The optional <prefix> defines part of
              a  path  name  to the new programs. The ‐t parameter, <program>,
              specifies the program to which the <prefix> is to  be  appended.
              When  specifying  <prefix>,  there must be a slash (/) after the
              folder name.

       ‐F[<config_file>][:<stanza>]
              Names an alternative configuration file (.cfg) for the compiler.
              <config_file>  is  the  name  of  a compiler configuration file.
              <stanza> is the name of the command used to invoke the compiler.
              This  directs  the compiler to use the entries under <stanza> in
              the <config_file> to set up the compiler environment.  At  least
              one of the arguments must be supplied.

       ‐NS<bytes>
              Specifies  the size of internal program storage areas, in bytes.

              Default: −NS512

       ‐qspillsize=<bytes>
              This is the long form of the ‐NS option. Refer to ‐NS  for  more
              information.

       ‐t<programs_list>
              Applies  the prefix from the ‐B option to the specified programs
              in <programs_list>. <programs_list> is a chain (i.e:  ‐tbcI)  of
              one or more of the following:

              a = Assembler
              b = Low‐level optimizer
              c = Compiler front end
              d = Disassembler
              F = C preprocessor
              I = High‐level optimizer ‐ compile step
              l = Linker
              z = Binder

       ‐W<program>,<options_list>
              Gives  the  specified  option(s)  to the compiler program, <pro‐
              gram>. <options_list> is a comma‐separated list of one  or  more
              options. <program> can be one of the following:

              a = Assembler
              b = Low‐level optimizer
              c = Compiler front end
              d = Disassembler
              F = C preprocessor
              h = Array language optimizer
              I = High‐level optimizer ‐ compile step
              l = Linker
              z = Binder


SEE ALSO
       showpdf(1), mergepdf(1), resetpdf(1), cleanpdf(1).

       For more information, refer to the following Web sites:
       http://www.ibm.com/software/awdtools/fortran/xlfortran/library/
       http://www.ibm.com/software/awdtools/fortran/xlfortran/support/


COPYRIGHT
       Licensed Materials ‐ Property of IBM.

       IBM XL Fortran Advanced Edition for Linux, V11.1.

       5724‐S74

       Copyright IBM Corp. 1991, 2007. All Rights Reserved.

       IBM,  POWER3,  POWER4,  POWER5,  POWER5+,  POWER6,  PowerPC and SAA are
       trademarks or registered trademarks of International Business  Machines
       Corporation in the United States, other countries, or both.

       Linux is a registered trademark of Linus Torvalds in the United States,
       other countries, or both.

       Windows is a trademarks of Microsoft Corporation in the United  States,
       other countries, or both.

       US  Government Users Restricted Rights ‐ Use, duplication or disclosure
       restricted by GSA ADP Schedule Contract with IBM Corp.



IBM                                  2007                               xlf(1)
configure:14010: $? = 249
configure:13999: xlf -V >&5
export XL_CONFIG=/etc/opt/ibmcmp/xlf/11.1/xlf.cfg:xlf 
less /opt/ibmcmp/xlf/11.1/msg/en_US/xlf.txt 
xlf(1)         IBM XL Fortran Advanced Edition for Linux, V11.1         xlf(1)



NAME
       xlf,  xlf_r,  f77,  fort77,  xlf90,  xlf90_r, f90, xlf95, xlf95_r, f95,
       xlf2003, xlf2003_r, f2003 ‐ invoke the IBM XL Fortran compiler.


SYNTAX
       <invocation‐command> [ <option> | <inputfile> ] ...


DESCRIPTION
       The invocation commands compile Fortran source files.
       The commands and their recommended uses are described below.

       Invocations                   Usage (supported standards)
       _________________________________________________________

       xlf, xlf_r, f77,              Compile Fortran 77 source
       fort77                        files.

       xlf90, xlf90_r, f90           Compile Fortran 90 source
                                     files.

       xlf95, xlf95_r, f95           Compile Fortran 95 source
                                     files.

       xlf2003, xlf2003_r,           Compile Fortran 2003 source
       f2003                         files.

       The main difference between these commands is that they  use  different
       default  options (which are set in the configuration file /etc/opt/ibm‐
       cmp/xlf/11.1/xlf.cfg).
       See the Compiler Reference for more  information  on  these  invocation
       commands.

       All  invocations with a suffix of _r allow for thread‐safe compilation.
       Use these commands to create threaded applications or to link  programs
       that use multi‐threading.

       These  commands  also  process assembler source files and object files.
       The compiler calls the link  editor  to  produce  a  single  executable
       unless  you specify the compiler options that prevent object files from
       being linked.

       The input file may have any of the following suffixes:

        .f, .f77, .f90, .f95,        Fortran source file
        .f03

        .o or .a                     Object file for ld command

        .s                           Assembler source file

        .so                          Shared object file

        .F, .F77, .F90, .F95,        Fortran source file
        .F03                         with cpp preprocessor
                                     directives


OPTIONS
       Compiler options are categorized by their functions and may be used  to
       set  the  compiler  behavior.  Options  can  be flag options or keyword
       options.

       Keyword options are specified in one of the following ways:
       ‐q<option>
       ‐q<option>=<suboption>
       ‐q<option>=<suboption>:<suboption>

       Keyword options with no  suboptions  represent  switches  that  may  be
       either  on  or off. ‐qx turns the switch on, and −qnox turns the switch
       off. For example, ‐qsource tells the compiler to produce a source list‐
       ing  and ‐qnosource tells the compiler not to produce a source listing.

Output control options
       ‐c     Instructs the compiler to pass  source  files  to  the  compiler
              only. The compiled source files are not sent to the linker. This
              option produces an object  file,  file_name.o,  for  each  valid
              source file.

       ‐d     Keeps  temporary files produced by C preprocessor (cpp), instead
              of deleting them. By default, temporary files  produced  by  cpp
              are deleted.

       ‐qmoddir=<directory>
              Specifies  the  location  for  any  .mod files that the compiler
              writes.

              Default:
                   .mod files are placed in the current directory.

       ‐o <path>
              Specifies an output location for the object, assembler, or  exe‐
              cutable  files  created  by  the compiler. When the ‐o option is
              used during compiler invocation,  <path>  can  be  the  name  of
              either a file or a directory.

              Default: −o a.out

       ‐S     Generates  an assembler language file (.s) for each source file.
              The resulting .s files can be assembled  to  produce  object  .o
              files or an executable file (a.out).

Input control options
       ‐qcclines | ‐qnocclines
              Enables recognition of conditional compilation lines.

              Default:
                   · ‐qcclines if ‐qsmp=omp is specified.
                   · ‐qnocclines otherwise.

       ‐qci=<numbers>
              Activates  the specified INCLUDE lines. Specifies identification
              numbers (from 1 to 255) of conditional includes.

              Default: No default value

       ‐qcr | ‐qnocr
              Allows you to control how the compiler interprets the  CR  (car‐
              riage return) character. This allows you to compile code written
              using a Mac OS or DOS/Windows editor.

              Default: −qnocr

       ‐qdirective[=<directive_list>] | ‐qnodirective[=<directive_list>]
              Specifies sequences of characters, known as  trigger  constants,
              that identify comment lines as compiler comment directives.

              Default: −qnodirective

       ‐qfixed[=<right_margin>]
              Indicates  that the input source program is in fixed source form
              and optionally specifies the maximum line length.

              Default:
                   · ‐qfixed=72 for the xlf, xlf_r, f77, and fort77 invocation
                   commands.
                   ·  ‐qfree=f90  for the xlf90, xlf90_r, f90, xlf95, xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.

       ‐qfree[=f90|ibm]
              Indicates that the source code is free form.

              ibm
                   Specifies compatibility with the free source  form  defined
                   for VS FORTRAN.
              f90
                   Specifies  compatibility  with the free source form defined
                   for Fortran 90, Fortran 95 and Fortran 2003.

              Default:
                   · ‐qfixed=72 for the xlf, xlf_r, f77, and fort77 invocation
                   commands.
                   ·  ‐qfree=f90  for the xlf90, xlf90_r, f90, xlf95, xlf95_r,
                   f95, xlf2003, xlf2003_r and f2003 invocation commands.

       ‐I<directory_path>
              Adds a directory to the search path for #include files and  .mod
              files.  Before  checking the default directories for include and
              .mod files, the compiler checks each  directory  in  the  search
              path. For include files, this path is only used if the file name
              in an INCLUDE line is not provided with an absolute path.

              Default:
                   The following directories are searched,  in  the  following
                   order, after any paths that are specified by the ‐I option:
                   1) The current directory.
                   2) The directory where the source file is located.
                   3) /usr/include.

       ‐qmixed | ‐qnomixed
              The long form of the ‐U option. Makes the compiler  case  sensi‐
              tive for names.

              Default: −qnomixed

       ‐qsuffix=<suboption>=<suffix>
              Specifies the source‐file suffix on the command line. Suboptions
              include:

              f=<suffix>
                   where <suffix> is the new source‐file suffix.
              o=<suffix>
                   where <suffix> is the new object‐file suffix.
              s=<suffix>
                   where <suffix> is the new assembler source‐file suffix.
              cpp=<suffix>
                   where <suffix> is the new preprocessor source‐file  suffix.

       ‐U     Makes  the  compiler case sensitive for names. Suppresses lower‐
              case folding of Fortran code. By default,  the  compiler  inter‐
              prets all names as if they were in lowercase.

       ‐qxlines | ‐qnoxlines
              Specifies  whether  fixed source form lines with a X in column 1
              are compiled or treated as comments.

              Default: −qnoxlines

Language element control options
       ‐D     Specifies whether the compiler compiles fixed source form  lines
              with a D in column 1 or treats them as comments.

       ‐qdlines | ‐qnodlines
              The long form of the ‐D option.

              Default: −qnodlines

       ‐qlanglvl=<suboptions_list>
              Determines  which language standard (or superset, or subset of a
              standard) to consult for nonconformance. It  identifies  noncon‐
              forming  source code and also options that allow such nonconfor‐
              mances.
              <suboptions_list> is a colon‐separated  list  of  the  following
              suboptions:

              77std
                   Accepts  the  language  that  the  ANSI FORTRAN 77 standard
                   specifies and reports anything  else  using  language‐level
                   messages.
              90std
                   Accepts the language that the ISO Fortran 90 standard spec‐
                   ifies and reports anything else using  language‐level  mes‐
                   sages.
              90pure
                   The  same  as  90std  except that it also reports language‐
                   level messages for  any  obsolescent  Fortran  90  features
                   used.
              90ext
                   Obsolete suboption that is equivalent to extended. To avoid
                   problems in the future, use the extended suboption instead.
              95std
                   Accepts the language that the ISO Fortran 95 standard spec‐
                   ifies and reports anything else using  language‐level  mes‐
                   sages.
              95pure
                   The  same  as  95std  except that it also reports language‐
                   level messages for  any  obsolescent  Fortran  95  features
                   used.
              2003std
                   Accepts the language that the ISO Fortran 95 standard spec‐
                   ifies, as well as all Fortran 2003 features supported by XL
                   Fortran,  and  reports  anything  else using language‐level
                   messages.
              2003pure
                   The same as 2003std except that it also  reports  language‐
                   level  messages  for  any obsolescent Fortran 2003 features
                   used.
              extended
                   Accepts the full Fortran 95 language standard, all  Fortran
                   2003  features supported by XL Fortran, and all extensions,
                   effectively turning off language‐level checking.

              Default: ‐qlanglvl=extended

       ‐qmbcs | ‐qnombcs
              Specifies that string literals and comments can  contain  multi‐
              byte characters.

              Default: −qnombcs

       ‐qnullterm | ‐qnonullterm
              Appends  a  null  character to each character expression that is
              passed as a dummy argument, making it more  convenient  to  pass
              strings to C functions.

              Default: −qnonullterm

       ‐1     Executes  each  DO loop in the compiled program at least once if
              its DO statement is executed, even if the iteration count is  0.
              This is the short form of the ‐qonetrip option.

       ‐qonetrip | ‐qnoonetrip
              The long form of the ‐1 option.

              Default: −qnoonetrip

       ‐qposition={appendold|appendunknown}
              Positions  the  file pointer at the end of the file when data is
              written after an OPEN statement with no POSITION= specifier, and
              the  corresponding  STATUS=value  (OLD or UNKNOWN) is specified.
              The default setting depends on the I/O specifiers  in  the  OPEN
              statement and on the compiler invocation command.

              Default:
                   ·  ‐qposition=appendold  for the xlf, xlf_r, f77 and fort77
                   invocation commands.
                   · The defined Fortran 90 and Fortran 95 behaviors  for  the
                   xlf90,   xlf90_r,   f90,   xlf95,  xlf95_r,  f95,  xlf2003,
                   xlf2003_r and f2003 invocation commands.

       ‐qqcount | ‐qnoqcount
              Accepts the character‐count Q edit descriptor(Q) as well as  the
              extended‐precision  Q  edit  descriptor (Qw.d). With −qnoqcount,
              all Q edit descriptors are interpreted as the extended‐precision
              Q edit descriptor.

              Default: −qnoqcount

       ‐qsaa | ‐qnosaa
              Checks  for  conformance to the SAA Fortran language definition.
              It identifies nonconforming source code and  also  options  that
              allow such nonconformances.

              Default: −qnosaa

       ‐qsave[={all|defaultinit}] | ‐qnosave
              Specifies the default storage class for local variables.

              all
                   The  default  storage  class  for  all  local  variables is
                   STATIC. Specifying this suboption is the same as specifying
                   the ‐qsave option without any suboptions.
              defaultinit
                   The  default storage class is STATIC for local variables of
                   derived type that have default initialization specified.

              Default:
                   · ‐qsave for the xlf, xlf_r, f77 and fort77 invocation com‐
                   mands.
                   ·  ‐qnosave  otherwise.  ‐qnosave  sets the default storage
                   class to AUTOMATIC.

       ‐qsclk={centi|micro}
              Specifies the resolution that the SYSTEM_CLOCK intrinsic  proce‐
              dure uses in a program.

              centi
                   Uses centisecond resolution for the values returned.
              micro
                   Uses microsecond resolution.

              Default: −qsclk=centi

       ‐u     Specifies  that  no implicit typing of variable names is permit‐
              ted. It has the same effect as using the IMPLICIT NONE statement
              in each scope that allows implicit statements.

       ‐qxlf77=<settings>
              Provides  compatibility  with  Fortran  77  aspects  of language
              semantics and I/O data format that have changed. Most  of  these
              changes are required by the Fortran 90 standard.
              Suboptions include:

              blankpad | noblankpad
                   Pads  an  internal  or  direct‐access  file  if  the format
                   requires more characters than the record contains.
              gedit77 | nogedit77
                   Uses Fortran 77 semantics for the output  of  REAL  objects
                   with the G edit descriptor.
              intarg | nointarg
                   Converts  all  the integer arguments of an intrinsic proce‐
                   dure to the kind of the longest argument, if  they  are  of
                   different kinds.
              intxor | nointxor
                   Treats  .XOR. as a logical binary intrinsic operator rather
                   than a defined operator.
              leadzero | noleadzero
                   Produces a leading zero in realoutput under the D, E, F and
                   Q edit descriptors.
              oldboz | nooldboz
                   Turns  blanks  into zeros for data read by B, O, and Z edit
                   descriptors, regardless of the BLANK= specifier or  any  BN
                   or BZ control edit descriptors.
              persistent | nopersistent
                   Saves  the addresses of arguments to subprograms with ENTRY
                   statements in static storage.
              softeof | nosofteof
                   Allows READ and WRITE operations when a unit is  positioned
                   after  its  endfile  record,  unless  that  position is the
                   result of executing an ENDFILE statement.

              Default:
                   blankpad, nogedit77, nointarg, nointxor,  leadzero,  noold‐
                   boz, nopersistent, and nosofteof.

       ‐qxlf90=<suboption>
              Determines  whether  the compiler provides the Fortran 90 or the
              Fortran 95 level of support for certain aspects of the language.
              <suboption> can be one of the following:

              signedzero | nosignedzero
                   Determines  how  the SIGN(A,B) function handles signed real
                   0.0. In addition, determines whether negative internal val‐
                   ues  will  be  prefixed  with a minus when formatted output
                   would produce a negative sign zero.
              autodealloc | noautodealloc
                   Determines whether  the  compiler  deallocates  allocatable
                   arrays that are declared locally without either the SAVE or
                   the STATIC attribute and have a status of  currently  allo‐
                   cated when the subprogram terminates.
              oldpad | nooldpad
                   When the PAD=specifier is present in the INQUIRE statement,
                   specifying ‐qxlf90=nooldpad returns UNDEFINED when there is
                   no  connection,  or  when the connection is for unformatted
                   I/O. This behavior conforms to the Fortran 95 standard  and
                   above.  Specifying  ‐qxlf90=oldpad preserves the Fortran 90
                   behavior.

              Default:
                   · nosignedzero,  noautodealloc  and  oldpad  for  the  xlf,
                   xlf_r,  f77, fort77, xlf90, xlf90_r and f90 invocation com‐
                   mands.
                   · signedzero,  autodealloc  and  nooldpad  for  the  xlf95,
                   xlf95_r,  f95, xlf2003, xlf2003_r and f2003 invocation com‐
                   mands.

       ‐qxlf2003=<suboptions_list>
              Provides the ability to use language features introduced in  the
              Fortran 2003 standard.
              <suboptions_list>  is  a  colon‐separated list of one or more of
              the following suboptions:

              autorealloc | noautorealloc
                   Controls whether the compiler automatically reallocates the
                   left‐hand‐side  (LHS) with the shape of the right‐hand‐side
                   RHS when assigning into an allocatable variable. This  sub‐
                   option  has  no  effect  on reallocation when the values of
                   length type parameters in the LHS and RHS differ.
              bozlitargs | nobozlitargs
                   The bozlitargs suboption ensures that the passing  of  boz‐
                   literal  constants as arguments to the INT, REAL, CMPLX, or
                   DBLE intrinsic function conforms to the Fortran 2003  stan‐
                   dard.  The  ‐qlanglvl=2003pure  or ‐qlanglvl=2003std option
                   must  be  specified,  as  well.  If  ‐qport=typlssarg   and
                   −qxlf2003=bozlitargs  are  specified,  passing  boz‐literal
                   constants to the CMPLX intrinsic  will  yield  non‐standard
                   results.
              oldnaninf | nooldnaninf
                   When  oldnaninf is in effect, the compiler uses old XL For‐
                   tran behavior for output of IEEE NaN  and  infinity  excep‐
                   tional values in real or complex editing.
                   When  nooldnaninf  is in effect, the compiler uses the For‐
                   tran 2003 standard for output  of  IEEE  NaN  and  infinity
                   exceptional values in real or complex editing.
              polymorphic | nopolymorphic
                   When polymorphic is in effect, the compiler allows polymor‐
                   phic entities in Fortran  source  files  and  runtime  type
                   information  is generated for each derived type definition.
                   When nopolymorphic is in effect, polymorphic entities  can‐
                   not be specified in the Fortran source files and no runtime
                   type information is generated.
              signdzerointr | nosigndzerointr
                   When signdzerointr is in  effect,  the  passing  of  signed
                   zeros  to  the  SQRT,  LOG,  and  ATAN2 intrinsic functions
                   returns results consistent with the Fortran 2003  standard.
                   The  −qxlf90=signedzero  option must be in effect, as well.
                   For the xlf90, xlf77  and  xlf  invocations,  specify  both
                   options to have the Fortran 2003 behavior.
              stopexcept | nostopexcept
                   When  stopexcept is in effect, STOP statements will display
                   informational messages about signaling IEEE  floating‐point
                   exceptions.
                   When  nostopexcept is in effect, informational messages are
                   suppressed.
              volatile | novolatile
                   When volatile is in effect, a non‐VOLATILE entity  that  is
                   use‐  or  host‐associated  can  be specified as VOLATILE in
                   inner or local scope.

              Default:
                   ·  autorealloc,   bozlitargs,   nooldnaninf,   polymorphic,
                   signdzerointr,  stopexcept  and  volatile  for  the  f2003,
                   xlf2003, or xlf2003_r invocation commands.
                   · noautorealloc,  nobozlitargs,  oldnaninf,  nopolymorphic,
                   nosigndzerointr,  nostopexcept and novolatile for all other
                   invocation commands.

Floating‐point and integer control options
       ‐qautodbl=<suboption>
              Provides  an  automatic  means  of  converting  single‐precision
              floating‐point  calculations to double‐precision and of convert‐
              ing double‐precision  calculations  to  extended‐precision.  The
              suboptions are:

              none
                   Does not promote or pad any objects that share storage.
              dbl4
                   Promotes  floating‐point  objects that are single‐precision
                   (4 bytes in size) to double‐precision.
                   This suboption requires  the  libxlfpmt4.a  library  during
                   linking.
              dbl8
                   Promotes  floating‐point  objects that are double‐precision
                   (8 bytes in size) to extended‐precision.
                   This suboption requires  the  libxlfpmt8.a  library  during
                   linking.
              dbl
                   Combines the promotions that dbl4 and dbl8 perform.
                   This  suboption  requires the libxlfpmt4.a and libxlfpmt8.a
                   libraries during linking.
              dblpad4
                   Performs the same promotions as dbl4 and  pads  objects  of
                   other types (except CHARACTER) if they could possibly share
                   storage with promoted objects.
                   This suboption requires the  libxlfpmt4.a  and  libxlfpad.a
                   libraries during linking.
              dblpad8
                   Performs  the  same  promotions as dbl8 and pads objects of
                   other types (except CHARACTER) if they could possibly share
                   storage with promoted objects.
                   This  suboption  requires  the libxlfpmt8.a and libxlfpad.a
                   libraries during linking.
              dblpad
                   Combines the promotions done by  dbl4  and  dbl8  and  pads
                   objects  of  other  types  (except CHARACTER) if they could
                   possibly share storage with promoted objects.
                   This suboption requires the libxlfpmt4.a, libxlfpmt8.a, and
                   libxlfpad.a libraries during linking.

              Default: ‐qautodbl=none

       ‐qdpc[=e] | ‐qnodpc
              Increases  the precision of real constants, for maximum accuracy
              when assigning real constants  to  DOUBLE  PRECISION  variables.
              ‐qdpc=e also promotes constants with an e exponent.

              Default: −qnodpc

       ‐qenum=<suboption>
              Specifies  the  range for an enumerator’s value. <suboption> can
              be:

              1
                   The enumerator value must fit into 1 byte of  storage.  The
                   enumerator is of type integer(4).
              2
                   The  enumerator value must fit into 2 bytes of storage. The
                   enumerator is of type integer(4).
              4
                   The enumerator value must fit into 4 bytes of storage.  The
                   enumerator is of type integer(4).
              8
                   The  enumerator value must fit into 8 bytes of storage. The
                   enumerator is of type integer(8).

              Default: −qenum=4

       ‐qfloat=<suboptions_list>
              Specifies various floating‐point suboptions. This provides  dif‐
              ferent  strategies  for speeding up or improving the accuracy of
              floating‐point calculations. <suboptions_list> is a  colon‐sepa‐
              rated list of one or more of the following:

              complexgcc | nocomplexgcc
                   Enables  compatibility  with  GCC  passing and returning of
                   parameters of complex data type.
                   Default: nocomplexgcc
              fltint | nofltint
                   Speeds up floating‐point‐to‐integer  conversions  by  using
                   faster  inline  code  that  does  not  check for overflows.
                   ‐qfloat=nofltint checks  floating‐point‐to‐integer  conver‐
                   sions for out‐of‐range values.
                   Default:
                     · nofltint at ‐O2 optimization.
                     ·  fltint  when  ‐qnostrict or ‐O3 or higher optimization
                     level is in effect.
              fold | nofold
                   Specifies that constant floating‐point expressions  are  to
                   be evaluated at compile time rather than at run time.
                   Default: fold
              gcclongdouble | nogcclongdouble
                   Specifies  whether  the compiler should use GCC‐supplied or
                   IBM‐supplied library  functions  for  128‐bit  long  double
                   operations. gcclongdouble ensures binary compatibility with
                   GCC for mathematical calculations but nogcclongdouble  pro‐
                   duces better performance.
                   Default: nogcclongdouble
              hsflt | nohsflt
                   The  hsflt  option  speeds  up  calculations  by truncating
                   instead of rounding computed  values  to  single  precision
                   before  storing  and  on conversions from floating‐point to
                   integer. The nohsflt suboption specifies that single‐preci‐
                   sion  expressions  are  rounded after expression evaluation
                   and that floating‐point‐to‐integer conversions  are  to  be
                   checked for out‐of‐range values.
                   Default: nohsflt
              maf | nomaf
                   Makes  floating‐point calculations faster and more accurate
                   by using  floating‐point  multiply‐add  instructions  where
                   appropriate.
                   Default: maf
              nans | nonans
                   Generates  extra  instructions to detect signaling NaN when
                   converting from single‐precision to double‐precision at run
                   time. The option nonans specifies that this conversion need
                   not be detected.
                   Default: nonans
              rngchk | norngchk
                   Specifying norngchk instructs the compiler  to  skip  range
                   checking, allowing for increased performance where division
                   and sqrt operations are performed repeatedly within a loop.
                   When  rngchk  is specified, range checking is performed for
                   input arguments for software divide and inlined sqrt opera‐
                   tions.
                   When  ‐qstrict  is  active,  the  setting of this option is
                   forced to ‐qfloat=rngchk. When ‐qnostrict  is  active,  the
                   setting  of  this  option  is  ‐qfloat=norngchk  unless the
                   −qfloat=rngchk option is explicitly set by the user.
                   Default: rngchk
              rrm | norrm
                   Prevents floating‐point optimizations that are incompatible
                   with runtime rounding to plus and minus infinity modes.
                   Default: norrm
              rsqrt | norsqrt
                   Specifies whether a sequence of code that involves division
                   by the result of a square root can be replaced by calculat‐
                   ing  the  reciprocal  of  the  square root and multiplying.
                   Allowing this replacement produces code that  runs  faster.
                   ‐qfloat=rsqrt has no effect unless ‐qignerrno is also spec‐
                   ified.
                   Default:
                     · norsqrt at ‐O2 optimization.
                     · rsqrt when when ‐qnostrict or ‐O3 or  higher  optimiza‐
                     tion level is in effect.
              strictnmaf | nostrictnmaf
                   Ensures  that  the  compiler does not perform optimizations
                   that introduce multiply‐add operations that do not preserve
                   the sign of a zero value.
                   Default: nostrictnmaf

       ‐qieee=<suboption>
              Specifies  the rounding mode for the compiler to use when evalu‐
              ating constant floating‐point expressions at compile time. <sub‐
              option> can be one of the following:

              Near
                   Round to nearest representable number
              Minus
                   Round toward minus infinity
              Plus
                   Round toward plus infinity
              Zero
                   Round toward zero

              Default: −qieee=near

       ‐qintlog | ‐qnointlog
              Allows  mixing  of INTEGER and LOGICAL values in expressions and
              statements.

              Default: −qnointlog

       ‐qintsize={2|4|8)
              Sets the size of default INTEGER and LOGICAL values.

              Default: −qintsize=4

       ‐qrealsize=(4|8}
              Sets the default size in bytes of REAL, DOUBLE  PRECISION,  COM‐
              PLEX and DOUBLE COMPLEX values.

              Default: −qrealsize=4

       ‐qstrictieeemod | ‐qnostrictieeemod
              Specifies that the compiler will adhere to the Fortran 2003 IEEE
              arithmetic rules for  the  ieee_arithmetic  and  ieee_exceptions
              intrinsic modules.

              Default: −qstrictieeemod

       ‐y<rounding_mode>
              Equivalent  to  the  ‐qieee  option.  Specifies the compile‐time
              rounding mode  of  constant  floating‐point  expressions,  where
              <rounding_mode> is one of the following:

              m = round toward minus infinity
              n = round to the nearest representable number, ties to even
              p = round toward plus infinity
              z = round toward zero

              Default: −yn

Object code control options
       ‐q32, ‐q64
              Selects  either 32‐bit or 64‐bit compilation mode.  Use the ‐q32
              and ‐q64 options, along with  the  ‐qarch  and  −qtune  compiler
              options, to optimize the output of the compiler to the architec‐
              ture on which that output will be used.

              Default: −q32

       ‐qinlglue | ‐qnoinlglue
              This option inlines glue code that optimizes  external  function
              calls when compiling at ‐q64 and ‐O2 and higher.

              Default: −qnoinlglue

       ‐qpic[={small|large}] | ‐qnopic
              Generates  position‐independent  code (pic). Specify −qpic=small
              if the global  offset  table  must  be  64  Kb  or  smaller,  or
              ‐qpic=large if it can be larger than 64 Kb.

              Default: −qpic=small

       ‐qsaveopt | ‐qnosaveopt
              Saves the command‐line options used for compiling a source file,
              the version and level of each compiler component invoked  during
              compilation,  and  other information to the corresponding object
              file.
              This option must be used with the ‐c option.

              Default: −qnosaveopt

       ‐qtbtable=<suboption>
              Generates a traceback table that contains information about each
              function,  including the type of function as well as stack frame
              and register information. The traceback table is placed  in  the
              text  segment  at the end of its code.  This option applies only
              to 64‐bit compilations, and is ignored if specified for a 32‐bit
              compilation.  Suboptions include:

              none
                   No traceback table is generated.
              small
                   A  traceback  table  is generated with no name or parameter
                   information. This is the default with optimization if ‐g is
                   not specified.
              full
                   A  full  traceback  table is generated. This is the default
                   with ‐qnoopt or ‐g specified.

              Default:
                   · ‐qtbtable=full when compiling non‐optimized (without  −O)
                   or for debugging (with ‐g).
                   · ‐qtbtable=small otherwise.

       ‐qthreaded
              Ensures that all optimizations will be thread‐safe for executing
              in a multi‐threaded environment.

              Default:
                   ‐qthreaded for the xlf90_r, xlf95_r, xlf_r,  and  xlf2003_r
                   commands.

Error checking and debugging options
       ‐#     Traces the compilation and generates information on the progress
              of the compilation without invoking the preprocessor,  compiler,
              or linkage editor.

       ‐C     Checks  each  reference  to  an array element, array section, or
              character substring for correctness.

       ‐qcheck | ‐qnocheck
              The long form of the ‐C option.

              Default: −qnocheck

       ‐qflttrap[=<suboptions_list>] | ‐qnoflttrap
              Generates instructions to detect and trap runtime floating‐point
              exceptions.  <suboptions_list>  is a colon‐separated list of one
              or more of the following suboptions:

              enable
                   Enables trapping of the specified exceptions.
              imprecise
                   Only checks for  the  specified  exceptions  on  subprogram
                   entry and exit.
              inexact
                   Detects floating‐point inexact exceptions.
              invalid
                   Detects floating‐point invalid operation exceptions.
              nanq
                   Generates code to detect and trap NaNQ (Not a Number Quiet)
                   exceptions handled or generated  by  floating‐point  opera‐
                   tions.
              overflow
                   Detects floating‐point overflow.
              underflow
                   Detects floating‐point underflow.
              zerodivide
                   Detects floating‐point division by zero.

              Default: −qnoflttrap

       ‐qfullpath | ‐qnofullpath
              Records  the  full  or absolute path names of source and include
              files in object files compiled with debugging information  (when
              you use the ‐g option).

              Default: −qnofullpath

       ‐g     Generates debug information for debugging tools.
              ‐qdbg is the long form of ‐g.
              ‐g implies the ‐Q! option.

       ‐qhalt=<sev>
              Stops  the  compiler after the first phase if the severity level
              of errors detected equals or exceeds the specified level, <sev>.
              The severity levels in increasing order of severity are:

              i = informational messages
              l = language‐level messages
              w = warning messages
              e = error messages
              s = severe error messages
              u = unrecoverable error messages

              Default: −qhalt=s

       ‐qinit=f90ptr
              Makes  the  initial association status of pointers disassociated
              instead of undefined.
              This option applies to Fortran 90 and above.

              Default:
                   The default association status of pointers is undefined.

       ‐qinitauto=[<hex_value>] | ‐qnoinitauto
              Initializes each byte or word of storage for automatic variables
              to  the  specified hexadecimal value <hex_value>. This generates
              extra code and should only be used for error determination.   If
              you  specify ‐qinitauto without a <hex_value>, the compiler ini‐
              tializes the value of each byte of automatic storage to zero.

              Default: −qnoinitauto

       ‐qkeepparm | ‐qnokeepparm
              Ensures that function parameters are stored on the stack even if
              the  application is optimized. As a result, parameters remain in
              the expected memory location, providing access to the values  of
              these incoming parameters to tools such as debuggers.

              Default: −qnokeepparm

       ‐qlinedebug | ‐qnolinedebug
              Generates  only  abbreviated  line  number  and source file name
              information for the debugger.

              Default: −qnolinedebug

       ‐qobject | ‐qnoobject
              Specifies whether to produce an object file or to  stop  immedi‐
              ately after checking the syntax of the source files.

              Default: −qobject

       ‐qoptdebug | ‐qnooptdebug
              When  used with high levels of optimization, ‐qoptdebug produces
              source files containing optimized pseudocode that can be read by
              a debugger.
              An  output  file  with  a  .optdbg extension is created for each
              input file compiled with ‐qoptdebug. You can use the information
              contained  in  this  file  to  help you understand how your code
              actually behaves under optimization.

              Default: ‐qnooptdebug

       ‐qwarn64 | ‐qnowarn64
              Enables checking for possible data conversion  problems  between
              32‐bit and 64‐bit compiler modes.

              Default: −qnowarn64

       ‐qxflag=dvz
              Specifying  ‐qxflag=dvz  causes the compiler to generate code to
              detect  floating‐point  divide‐by‐zero  operations.  With   this
              option  on,  the  extra code calls the external handler function
              __xl_dzx when the divisor is zero.
              By default,  no  code  is  generated  to  detect  floating‐point
              divide‐by‐zero operations.

Listing and messages options
       -qattr[=full] | -qnoattr
              Produces  a  compiler listing that includes an attribute listing
              for all identifiers. If -qattr is specified,  the  listing  con-
              tains  only  those  identifiers that are used. If -qattr=full is
              specified, the listing contains all names. If -qnoattr is speci-
              fied, no listing is produced.

              Default: -qnoattr

       -qflag=<listing_severity>:<terminal_severity>
              Defines  the minimum severity level of diagnostic messages to be
              written to the listing file and to  the  user  terminal.  <list-
              ing_severity>  is  the  minimum  level for the listing file, and
              <terminal_severity> is the minimum level for the  terminal.  The
              message severity levels are:

              i = informational messages
              l = language-level messages
              w = warning messages
              e = error messages
              s = severe error messages
              q = no messages, even if the compiler encounters
                  unrecoverable errors

              Default: -qflag=i:i

       -qlist[={offset|nooffset}] | -qnolist
              Produces a compiler listing that includes an object listing. You
              can use the object listing to help  understand  the  performance
              characteristics  of the generated code and to diagnose execution
              problems.

              offset | nooffset
                   Changes the offset of the PDEF header  from  00000  to  the
                   offset of the start of the text area.

              Specifying   -qlist  without  the  suboption  is  equivalent  to
              list=nooffset.

              Default: -qnolist

       -qlistopt | -qnolistopt
              Produces a compiler listing that displays all the  options  that
              were in effect when the compiler was invoked.

              Default: -qnolistopt

       -qphsinfo | -qnophsinfo
              Reports the time taken in each compilation phase. Phase informa-
              tion is sent to standard output. The output takes the form <num-
              ber1>/<number2>  for  each  phase where <number1> represents the
              CPU time used by the compiler and <number2> represents the total
              of  the  compiler time and the time that the CPU spends handling
              system calls.

              Default: -qnophsinfo

       -qnoprint
              Prevents the compiler from creating the listing file, regardless
              of the settings of other listing options.

       -qreport[={smplist|hotlist}] | -qnoreport
              Determines whether to produce transformation reports showing how
              the program is parallelized and how loops are optimized.  Subop-
              tions are:

              smplist | hotlist
                   smplist produces a report showing how the program is paral-
                   lelized.
                   hotlist produces a report  showing  how  loops  are  trans-
                   formed.

              Specifying  -qreport  with  no suboptions is equivalent to -qre-
              port=hotlist.

              Default: -qnoreport

       -qsource | -qnosource
              Produces a compiler listing that includes source code.

              Default: -qnosource

       -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
              Determines which messages to suppress from  the  output  stream.
              The suboptions are:

              <msg_nums_list>
                   A colon-separated list of 7-digit compiler message numbers.
              cmpmsg
                   Suppresses the informational messages that report  compila-
                   tion progress and a successful completion.

              Default: -qnosuppress

       -v     Instructs  the compiler to report information on the progress of
              the compilation, and names the programs being invoked within the
              compiler and the options being specified to each program. Infor-
              mation is displayed in a comma-separated list.

       -V     Instructs the compiler to report information on the progress  of
              the compilation, and names the programs being invoked within the
              compiler and the options being specified to each program. Infor-
              mation is displayed in a space-separated list.

       -qversion[=verbose] | -qnoversion
              Displays  the  official  compiler  product name and the compiler
              version found on the system.

              verbose
                   Displays the official product name and a list  of  compiler
                   and  runtime  filesets along with their corresponding level
                   in  both  version,  release,  modification  and  fix  level
                   (V.R.M.F)  and YYYYMM format, where YYYY is the year and MM
                   is the month that the PTF is released.
                   If the fileset installed is at the BASE level, the  version
                   will be reported as "BASE" instead of YYYYMM.

              Default: -qnoversion

       -w     Suppresses informational, language-level and warning messages.
              Specifying this option is equivalent to specifying -qflag=e:e.

       -qxref[=full] | -qnoxref
              Specifies  whether to produce a compiler listing that includes a
              cross-reference listing of all identifiers.
              Specifying -qxref will report only identifiers  that  are  used,
              -qxref=full reports all identifiers in the program, and -qnoxref
              does not report any identifiers in the  program.  The  -qnoprint
              option overrides this option.

              Default: -qnoxref

